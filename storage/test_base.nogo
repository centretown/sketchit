// package storage

// import (
// 	"context"
// 	"encoding/json"
// 	"fmt"
// 	"testing"
// 	"time"

// 	"github.com/centretown/sketchit/api"
// 	"github.com/centretown/sketchit/info"
// 	"go.mongodb.org/mongo-driver/bson"
// 	"go.mongodb.org/mongo-driver/mongo"
// 	"go.mongodb.org/mongo-driver/mongo/options"
// 	"go.mongodb.org/mongo-driver/mongo/readpref"
// )

// var baseURI = "mongodb://testing:test@localhost:27017/?authSource=sketchit-test"

// // TestConnnect - used to learn
// func TestConnnect(t *testing.T) {
// 	var (
// 		client *mongo.Client
// 		err    error
// 	)

// 	client, err = mongo.NewClient(options.Client().ApplyURI(baseURI))
// 	if err != nil {
// 		t.Fatalf("error NewClient %v", err)
// 	}

// 	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
// 	defer cancel()

// 	err = client.Connect(ctx)
// 	if err != nil {
// 		t.Fatalf("error Connect %v", err)
// 	}

// 	err = client.Ping(ctx, readpref.Primary())
// 	if err != nil {
// 		t.Fatalf("error Ping %v", err)
// 	}
// 	t.Log("OK")
// 	return
// }

// var testDevice = &api.Device{
// 	Domain: "home",
// 	Label:  "esp32-01",
// 	Model:  "ESP32",
// 	Ip:     "192.168.1.200:8080",
// 	Port:   "esp32-01",
// 	Pins: []*api.Device_Pin{
// 		{Id: 2, Label: "LED", Purpose: "activity indicator"},
// 		{Id: 5, Label: "TX", Purpose: "soft serial transmitter"},
// 		{Id: 6, Label: "RX", Purpose: "soft serial receiver"},
// 	},
// }

// // TestBsonDevice - used to learn
// func TestBsonDevice(t *testing.T) {
// 	// encode api.Device to JSON
// 	b, err := bson.Marshal(testDevice)
// 	if err != nil {
// 		t.Fatalf("json.Marshal %v", err)
// 	}

// 	// t.Logf("encoded Device:\n%s", string(b))

// 	deviceB := &api.Device{}
// 	err = bson.Unmarshal(b, deviceB)
// 	if err != nil {
// 		t.Fatalf("json.Marshal %v", err)
// 	}

// 	if !compareDevices(testDevice, deviceB) {
// 		t.Fatal("compareDevices failed")
// 	}

// 	t.Log("compareDevices passed")
// }

// // TestCreateDevice -
// func TestCreateDevice(t *testing.T) {
// 	var (
// 		client     *mongo.Client
// 		err        error
// 		name       = "sketchit-test"
// 		collection *mongo.Collection
// 		b          []byte
// 	)

// 	client, err = mongo.NewClient(options.Client().ApplyURI(baseURI))
// 	if err != nil {
// 		t.Fatalf("error NewClient %v", err)
// 	}

// 	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
// 	defer cancel()

// 	err = client.Connect(ctx)
// 	if err != nil {
// 		t.Fatalf("error Connect %v", err)
// 	}

// 	// encode api.Device to JSON
// 	b, err = bson.Marshal(testDevice)
// 	if err != nil {
// 		t.Fatalf("json.Marshal %v", err)
// 	}

// 	collection = client.Database(name).Collection("devices")
// 	res, err := collection.InsertOne(ctx, b)
// 	if err != nil {
// 		t.Fatalf("collection.InsertOne %v",
// 			info.Inform(err, ErrMongoClient, fmt.Sprintf("%v", testDevice.Label)))
// 	}
// 	id := res.InsertedID
// 	t.Log(id)
// }

// // TestListDevice -
// func TestListDevice(t *testing.T) {
// 	var (
// 		client     *mongo.Client
// 		err        error
// 		name       = "sketchit-test"
// 		collection *mongo.Collection
// 	)

// 	client, err = mongo.NewClient(options.Client().ApplyURI(baseURI))
// 	if err != nil {
// 		t.Fatalf("error NewClient %v", err)
// 	}

// 	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
// 	defer cancel()

// 	err = client.Connect(ctx)
// 	if err != nil {
// 		t.Fatalf("error Connect %v", err)
// 	}

// 	collection = client.Database(name).Collection("devices")
// 	cur, err := collection.Find(ctx, bson.D{})
// 	defer cur.Close(ctx)
// 	for cur.Next(ctx) {
// 		var device = &api.Device{}
// 		err := cur.Decode(&device)
// 		if err != nil {
// 			t.Fatal(err)
// 		}
// 		b, err := json.Marshal(device)
// 		if err != nil {
// 			t.Fatal(err)
// 		}
// 		t.Log(string(b))
// 	}
// 	if err := cur.Err(); err != nil {
// 		t.Fatal(err)
// 	}
// }

// func compareDevices(a, b *api.Device) (cmp bool) {
// 	cmp = a.Label == b.Label &&
// 		a.Model == b.Model &&
// 		a.Ip == b.Ip &&
// 		a.Port == b.Port
// 	if cmp == false {
// 		return
// 	}

// 	cmp = len(a.Pins) == len(b.Pins)
// 	if cmp == false {
// 		return
// 	}

// 	for i, p := range a.Pins {
// 		q := b.Pins[i]
// 		cmp = p.Id == q.Id &&
// 			p.Label == q.Label &&
// 			p.Purpose == q.Purpose
// 		if cmp == false {
// 			return
// 		}
// 	}
// 	return
// }
