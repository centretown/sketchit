syntax = "proto3";
package centretown.sketchit.v1;

option go_package = "github.com/centretown/sketchit/api";

// import "google/api/http.proto";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

// import "grpc.gateway.protoc_gen_swagger.options";
// import "protoc-gen-swagger/options/annotations.proto";

// Version: 1.0.0

message PingMessage {
    string greeting = 1;
}

// defines a micro controller device for sketchit
message Device {
    // The label uniquely identifies the device within a domain or
    // group of connected devices
    string label = 1;
    // The model name
    string model = 2;
    // Identifies a pin on a micro controller device
    message Pin {
        // The pin number as designated by the device, eg: 2 for Pin #2
        int32 id = 1;
        // The label assigned to this pin, eg: "Internal-LED"
        string label = 2;
        // The pins overall purpose in the sketch,  eg: "blink on to indicate activity"
        string purpose = 3;
    }
    // io pins if any
    repeated Pin pins = 3;
    // ip address if any
    string ip = 4;
    // serial port id if any
    string port = 5;
}
  
service Devices {
    rpc SayHello(PingMessage) returns (PingMessage) {
        // SayHello to HTTP POST.
        option (google.api.http) = {
            post: "/1/ping"
            body: "*"
        };
    }

    rpc List(ListDevicesRequest) returns (ListDevicesResponse) {
        // List method maps to HTTP GET.
        // eg: /domain/home-iot/devices/esp32-01
        option (google.api.http) = {
            get: "/v1/{parent=domain/*}/devices"
        };
    }

    rpc Get(GetDeviceRequest) returns (Device) {
        // Get maps to HTTP GET. Resource name is mapped to the URL. No body.
        option (google.api.http) = {
          // Note the URL template variable which captures the multi-segment resource
          // name of the requested book, such as "domain/home-iot/devices/esp32-01"
          get: "/v1/{name=domain/*/devices/*}"
        };
      }
      

    rpc Create(CreateDeviceRequest) returns (Device) {
        // Create maps to HTTP POST. URL path as the collection name.
        // HTTP request body contains the resource.
        // The `parent` captures the domain resource name, 
        // such as "domain/home_iot".
        option (google.api.http) = {
            post: "/v1/{parent=domain/*}/devices"
            body: "device"
        };
    }

    rpc Update(UpdateDeviceRequest) returns (Device) {
        // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            patch: "/v1/{device.label=domain/*/devices/*}"
            body: "device"
        };       
    }
    
    rpc Delete(DeleteDeviceRequest) returns (google.protobuf.Empty) {
        // Delete maps to HTTP DELETE. Resource name maps to the URL path.
        // eg: "domain/home-iot/devices/esp32-01"
        option (google.api.http) = {
            delete: "/v1/{name=domain/*/devices/*}"
        };
    }
}

// ListDevicesRequest defines the information required to retrieve a list of pins
message ListDevicesRequest {
    // The parent domain name, eg: "domain/home-iot/devices".
    string parent = 1;
    // The maximum number of pins to return.
    int32 page_size = 2;
    // The next_page_token value returned from a previous List request, if any.
    string page_token = 3;
}

message GetDeviceRequest {
    // eg: "domain/home-iot/devices/esp32-01"
    string name = 1;
}

// ListDevicesResponse defines the return value to a ListDevicesRequest
message ListDevicesResponse {
    // Devices listed
    repeated Device devices = 1;
    // next page
    string next_page_token = 2;
}

message CreateDeviceRequest {
    // The parent domain name
    string parent = 1;
    // The device's identifying label
    string label = 2;
    // The device resource to create.
    Device device = 3;
}

message UpdateDeviceRequest {
    // The parent domain name
    string parent = 1;
    // The replacement device
    Device device = 2;
}

message DeleteDeviceRequest {
    // The parent domain name
    string parent = 1;
    // The device's assigned label
    string name = 2;
}
