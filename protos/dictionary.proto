syntax = "proto3";
package centretown.sketchit.v1;

option go_package = "github.com/centretown/sketchit/api";

// Dictionary provides a pathway to the item collections.
// Items include application documents and the documents 
// that decsribe the semanatics of the deputy api.
// The api provides access to the sketchit services.
message Dictionary {
    // Collections of items or documents
    repeated Collection collections = 1;
    // Map to models to routes.
    // Routes are strings of text composed of labels 
    // split by separators.
    // Labels are unique to a collection, should have meaning
    // and must exclude separators.
    // Separators can be periods '.' or forward slashes '/'
    // Route structure:
    // <root>. single separator
    //   <collection>. collection label
    //     <parent>. route to ancestors
    //       <label>.
    //         <model>...
    // <model>
    //   <items>... values, arrays, maps and models
    map<string,Model> models = 2;
}

// Pathway provides the directions to a subject
message Pathway {
    // Routes are composed of labels split by separators.
    // Labels are unique to a collection, should have meaning
    // and must exclude separators.
    // Separators can be periods '.' or forward slashes '/'
    // Route structure:
    // <root>. single separator
    //   <collection>. collection label
    //     <parent>. route to ancestors
    //       <label>.
    //         <model>...
    // <model>
    //   <items>... values, arrays, maps and models
    string route = 1;
}

// Collection of stored items
message Collection {
    // name of the collection
    string name = 1;
    // type is mostly "collection"
    string type = 2;
    // readOnly indicates the update status
    bool readOnly = 3;
    // model describes 
    // of each document in the collection
    Model model = 4;
}

// Model defines the attributes of a collected item
message Model {
    // label used for route
    string label = 1;
    // model title for presentation
    string title = 2;
    // type of data represented
    string type = 3;
    // description of the model
    string description = 4;
    // uniqueItems constrains items to be unique
    bool uniqueItems = 5;
    // item list definition
    Model items = 6;
    // required properties and order
    repeated string required = 7;
    // options constrains model to an array of choices
    repeated string options = 8;
    // oneOf a selection of Schemas
    repeated Model oneOf = 9;
    // properties defines an ordered list of children
    // order determined by required array
    repeated Model properties = 10;
}

