syntax = "proto3";
package centretown.sketchit.v1;

option go_package = "github.com/centretown/sketchit/api";

import public "deputy.proto";

// Sketch defines how a device is programmed
message Sketch {
    // The toolkit or skillset required to run
    // this sketch core (Nano,Uno), esp32 ()
    string toolkit = 1;
    // The label unique to this toolkit
    // eg: "blink"
    string label = 2;
    // The device activated by this sketch
    // eg: "/home-iot/devices/esp32-01"
    string device = 3;
    // The purpose or description of the actions take by this sketch
    // eg: "Blink at prescribed intervals"
    string purpose = 4;
    // The setup stage defines the actions to take once
    // before entering the sketch loop
    repeated Action setup = 5;
    // The loop defines the actions that repeats forever
    repeated Action loop = 6;
}

enum Operation {
    nop = 0;
    delay = 1;
    mode = 2;
    pin = 3;
    hall = 4;
}

// Action defines a processing step or instruction
message Action {
    // The type identifies the type of command to run
    Operation operation = 1;
    // arguments
    repeated int32 arguments = 2;
}

// DelayOperation defines the data to carry out this action
message DelayOperation {
    // The duration of the delay in milliseconds
    int32 duration = 1;
}

// HallOperation defines the data to carry out this action
message HallOperation {
    // The duration of the delay in milliseconds
    int32 measurement = 1;
}

enum Signal {
    nosignal = 0;
    analog = 1;
    digital = 2;
}

enum Mode {
    nomode = 0;
    input = 1;
    output = 2;
}

enum Digital {
    low = 0;
    high = 1;
}

// ModeOperation defines how a pin is acted on.
message ModeOperation {
    // The pin id
    int32 id = 1;
    // The signal type analog/digital
    Signal signal = 2;
    // The mode type output/input
    Mode mode = 3;
}

// PinOperation reads/writes analog/digital values
message PinOperation {
    // The pin id
    int32 id = 1;
    // The signal type analog/digita
    Signal signal = 2;
    // The mode type output/input
    Mode mode = 3;
    // The value to read from or write to
    int32 value = 4;
}
