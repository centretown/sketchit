syntax = "proto3";
package centretown.sketchit.v1;

option go_package = "github.com/centretown/sketchit/api";

import public "commander.proto";

// Sketch defines how a device is programmed
message Sketch {
    // The model of the device this sketch is intended to run on
    // eg: ESP32, NANO, UNO
    string model = 6;
    // The unique label assigned to this sketch 
    // eg: "blink"
    string label = 1;
    // The device activated by this sketch
    // eg: "/home-iot/devices/esp32-01"
    string device = 2;
    // The purpose or description of the actions take by this sketch
    // eg: "Blink at prescribed intervals"
    string purpose = 3;
    // The setup stage defines the actions to take once
    // before entering the sketch loop
    repeated Action setup = 4;
    // The loop defines the actions that repeats forever
    repeated Action loop = 5;
}

// ListSketchesRequest defines the data required to get a list of sketches
message ListSketchesRequest {
    // The parent model, eg: "ESP32".
    string parent = 1;
    // format and projections...
    repeated FlagValues flags = 4;
    // The maximum number of sketches to return.
    int32 page_size = 2;
    // The next_page_token value returned from a previous List request, if any.
    string page_token = 3;
}

// GetSketchRequest defines the data required to get a Sketch
message GetSketchRequest {
    // The Sketch path name, 
    // eg: "/models/ESP32/sketches/esp32-01"
    string name = 1;
}

// ListSketchesResponse defines the return value to a ListsketchesRequest
message ListSketchesResponse {
    // sketches listed
    repeated Sketch sketches = 1;
    // next page
    string next_page_token = 2;
}

// CreateSketchRequest defines the data required to create a new Sketch
message CreateSketchRequest {
    // The parent model name
    // eg: /models/ESP32
    string parent = 1;
    // The Sketch resource to create.
    Sketch Sketch = 2;
}

// UpdateSketchRequest defines the data required to update an existing Sketch
message UpdateSketchRequest {
    // The Sketch path name, 
    // eg: "/models/ESP32/sketches/esp32-01"
    string name = 1;
    // The replacement Sketch
    Sketch Sketch = 2;
    // The update mask app  lies to the resource. For the `FieldMask` definition,
    // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
    // google.protobuf.FieldMask update_mask = 3;
}


// DeleteSketchRequest defines the data required to delete an existing Sketch
message DeleteSketchRequest {
    // The Sketch path name, 
    // eg: "/models/ESP32/sketches/esp32-01"
    string name = 1;
}

enum ActionType {
    delay = 0;
    mode = 1;
    pin = 2;
}

// Action defines a processing step or instruction
message Action {
    // The sequence defines the order of steps
    int32 sequence = 1;
    // The type identifies the type of command to run
    ActionType type = 2;
    // command defines one of a menu of commands to take
    oneof command {
        DelayAction delay = 10;
        ModeAction mode = 11;
        PinAction pin = 12;
    }
}

// DelayAction defines the data to carry out this action
message DelayAction {
    // The duration of the delay in milliseconds
    int32 duration = 1;
}

enum Signal {
    analog = 0;
    digital = 1;
}

enum Mode {
    input = 0;
    output = 1;
}

// ModeAction defines how a pin is acted on.
message ModeAction {
    // The pin id
    int32 id = 1;
    // The signal type analog/digital
    Signal signal = 2;
    // The mode type output/input
    Mode mode = 3;
}

// PinAction reads/writes analog/digital values
message PinAction {
    // The pin id
    int32 id = 1;
    // The signal type analog/digita
    Signal signal = 2;
    // The mode type output/input
    Mode mode = 3;
    // The value to read from or write to
    int32 value = 4;
}
