syntax = "proto3";
package centretown.sketchit.v1;

option go_package = "github.com/centretown/sketchit/api";

import public "google/protobuf/empty.proto";
// import "google/protobuf/field_mask.proto";
import public "google/api/annotations.proto";
import public "device.proto";
import public "sketch.proto";
import public "dictionary.proto";

// import "grpc.gateway.protoc_gen_swagger.options";
// import "protoc-gen-swagger/options/annotations.proto";

// Version: 1.0.0

service Sketchit {
    rpc SayHello(PingMessage) returns (PingMessage) {
        // SayHello to HTTP POST.
        option (google.api.http) = {
            post: "/1/ping"
            body: "*"
        };
    }

    rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {
        // List method maps to HTTP GET.
        option (google.api.http) = {
            // list device by sector
            // eg: /v1/sectors/home-iot/devices
            get: "/v1/{parent=sectors/*}/devices"
        };
    }

    rpc GetDevice(GetDeviceRequest) returns (Device) {
        // Get maps to HTTP GET. Resource name is mapped to the URL. No body.
        option (google.api.http) = {
            // the `name` of device resource, 
            // eg: `/v1/sectors/home-iot/devices/esp32-01`
            get: "/v1/{name=sectors/*/devices/*}"
        };
    }
      
    rpc CreateDevice(CreateDeviceRequest) returns (Device) {
        // Create maps to HTTP POST. URL path as the collection name.
        // HTTP request body contains the resource.
        option (google.api.http) = {
            // The `parent` captures the sector resource name, 
            // eg: `sectors/home_iot`.
            post: "/v1/{parent=sectors/*}/devices"
            body: "device"
        };
    }

    rpc UpdateDevice(UpdateDeviceRequest) returns (Device) {
        // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            // the `name` of Sketch resource, 
            // eg: `/v1/sectors/home-iot/devices/esp32-02`
            patch: "/v1/{name=sectors/*/devices/*}"
            body: "device"
        };       
    }
    
    rpc DeleteDevice(DeleteDeviceRequest) returns (google.protobuf.Empty) {
        // Delete maps to HTTP DELETE. Resource name maps to the URL path.
        // eg: "sector/home-iot/devices/esp32-01"
        option (google.api.http) = {
            // the `name` of Sketch resource, 
            // eg: `/v1/sectors/home-iot/devices/esp32-02`
            delete:  "/v1/{name=sectors/*/devices/*}"
        };
    }
    
    rpc ListSketches(ListSketchesRequest) returns (ListSketchesResponse) {
        // List method maps to HTTP GET.
        option (google.api.http) = {
            // list sketches by model
            // eg: /v1/models/ESP32/sketches
            get: "/v1/{parent=models/*}/sketches"
        };
    }
    
    rpc GetSketch(GetSketchRequest) returns (Sketch) {
        // Get maps to HTTP GET. Resource name is mapped to the URL. No body.
        option (google.api.http) = {
            // the `name` of Sketch resource, 
            // eg: `/v1/models/ESP32/sketches/blink`
            get: "/v1/{name=models/*/sketches/*}"
        };
    }
      
    rpc CreateSketch(CreateSketchRequest) returns (Sketch) {
        // Create maps to HTTP POST. URL path as the collection name.
        // HTTP request body contains the resource.
        option (google.api.http) = {
            // The `parent` captures the model resource name, 
            // eg: `models/blink`.
            post: "/v1/{parent=models/*}/sketches"
            body: "Sketch"
        };
    }
    
    rpc UpdateSketch(UpdateSketchRequest) returns (Sketch) {
        // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            // the `name` of Sketch resource, 
            // eg: `/v1/models/ESP32/sketches/blink`
            patch: "/v1/{name=models/*/sketches/*}"
            body: "Sketch"
        };       
    }
    
    rpc DeleteSketch(DeleteSketchRequest) returns (google.protobuf.Empty) {
        // Delete maps to HTTP DELETE. Resource name maps to the URL path.
        // eg: "sector/ESP32/sketches/esp32-01"
        option (google.api.http) = {
            // the `name` of Sketch resource, 
            // eg: `/v1/models/ESP32/sketches/blink`
            delete:  "/v1/{name=models/*/sketches/*}"
        };
    }

    rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {
        // ListCollections maps to HTTP GET
        option (google.api.http) = {
            // no parameters
            // eg: `/v1/collections`
            get: "/v1/collections"
        };       
    }
}


message PingMessage {
    string greeting = 1;
}

