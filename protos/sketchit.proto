syntax = "proto3";
package centretown.sketchit.v1;

option go_package = "github.com/centretown/sketchit/api";

import "google/protobuf/empty.proto";
// import "google/protobuf/field_mask.proto";
import public "google/api/annotations.proto";
import public "action.proto";

// import "grpc.gateway.protoc_gen_swagger.options";
// import "protoc-gen-swagger/options/annotations.proto";

// Version: 1.0.0

service Sketchit {
    rpc SayHello(PingMessage) returns (PingMessage) {
        // SayHello to HTTP POST.
        option (google.api.http) = {
            post: "/1/ping"
            body: "*"
        };
    }

    rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {
        // List method maps to HTTP GET.
        option (google.api.http) = {
            // list device by domain
            // eg: /v1/domains/home-iot/devices
            get: "/v1/{parent=domains/*}/devices"
        };
    }

    rpc GetDevice(GetDeviceRequest) returns (Device) {
        // Get maps to HTTP GET. Resource name is mapped to the URL. No body.
        option (google.api.http) = {
            // the `name` of device resource, 
            // eg: `/v1/domains/home-iot/devices/esp32-01`
            get: "/v1/{name=domains/*/devices/*}"
        };
    }
      
    rpc CreateDevice(CreateDeviceRequest) returns (Device) {
        // Create maps to HTTP POST. URL path as the collection name.
        // HTTP request body contains the resource.
        option (google.api.http) = {
            // The `parent` captures the domain resource name, 
            // eg: `domains/home_iot`.
            post: "/v1/{parent=domains/*}/devices"
            body: "device"
        };
    }

    rpc UpdateDevice(UpdateDeviceRequest) returns (Device) {
        // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            // the `name` of Process resource, 
            // eg: `/v1/domains/home-iot/devices/esp32-02`
            patch: "/v1/{name=domains/*/devices/*}"
            body: "device"
        };       
    }
    
    rpc DeleteDevice(DeleteDeviceRequest) returns (google.protobuf.Empty) {
        // Delete maps to HTTP DELETE. Resource name maps to the URL path.
        // eg: "domain/home-iot/devices/esp32-01"
        option (google.api.http) = {
            // the `name` of Process resource, 
            // eg: `/v1/domains/home-iot/devices/esp32-02`
            delete:  "/v1/{name=domains/*/devices/*}"
        };
    }
    
    rpc ListProcesses(ListProcessesRequest) returns (ListProcessesResponse) {
        // List method maps to HTTP GET.
        option (google.api.http) = {
            // list processes by model
            // eg: /v1/models/ESP32/processes
            get: "/v1/{parent=models/*}/processes"
        };
    }
    
    rpc GetProcess(GetProcessRequest) returns (Process) {
        // Get maps to HTTP GET. Resource name is mapped to the URL. No body.
        option (google.api.http) = {
            // the `name` of Process resource, 
            // eg: `/v1/models/ESP32/processes/blink`
            get: "/v1/{name=models/*/processes/*}"
        };
    }
      
    rpc CreateProcess(CreateProcessRequest) returns (Process) {
        // Create maps to HTTP POST. URL path as the collection name.
        // HTTP request body contains the resource.
        option (google.api.http) = {
            // The `parent` captures the model resource name, 
            // eg: `models/blink`.
            post: "/v1/{parent=models/*}/processes"
            body: "Process"
        };
    }
    
    rpc UpdateProcess(UpdateProcessRequest) returns (Process) {
        // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            // the `name` of Process resource, 
            // eg: `/v1/models/ESP32/processes/blink`
            patch: "/v1/{name=models/*/processes/*}"
            body: "Process"
        };       
    }
    
    rpc DeleteProcess(DeleteProcessRequest) returns (google.protobuf.Empty) {
        // Delete maps to HTTP DELETE. Resource name maps to the URL path.
        // eg: "domain/ESP32/processes/esp32-01"
        option (google.api.http) = {
            // the `name` of Process resource, 
            // eg: `/v1/models/ESP32/processes/blink`
            delete:  "/v1/{name=models/*/processes/*}"
        };
    }
}

message PingMessage {
    string greeting = 1;
}

// defines a micro controller device for sketchit
message Device {
    // collection of connected devices
    string domain = 6;
    // The unique label identifies the device within a domain
    string label = 1;
    // The model name
    string model = 2;
    // Identifies a pin on a micro controller device
    message Pin {
        // The pin number as designated by the device, eg: 2 for Pin #2
        int32 id = 1;
        // The label assigned to this pin, eg: "Internal-LED"
        string label = 2;
        // The pins overall purpose in the sketch,  eg: "blink on to indicate activity"
        string purpose = 3;
    }
    // io pins if any
    repeated Pin pins = 3;
    // ip address if any
    string ip = 4;
    // serial port id if any
    string port = 5;
}
  
// ListDevicesRequest defines the data required to get a list of devices
message ListDevicesRequest {
    // The parent domain, eg: "home-iot".
    string parent = 1;
    // The maximum number of devices to return.
    int32 page_size = 2;
    // The next_page_token value returned from a previous List request, if any.
    string page_token = 3;
}

// GetDeviceRequest defines the data required to get a device
message GetDeviceRequest {
    // The device path name, 
    // eg: "/domains/home-iot/devices/esp32-01"
    string name = 1;
}

// ListDevicesResponse defines the return value to a ListDevicesRequest
message ListDevicesResponse {
    // Devices listed
    repeated Device devices = 1;
    // next page
    string next_page_token = 2;
}

// CreateDeviceRequest defines the data required to create a new device
message CreateDeviceRequest {
    // The parent domain name
    // eg: /domains/home-iot
    string parent = 1;
    // The device resource to create.
    Device device = 2;
}

// UpdateDeviceRequest defines the data required to update an existing device
message UpdateDeviceRequest {
    // The device path name, 
    // eg: "/domains/home-iot/devices/esp32-01"
    string name = 1;
    // The replacement device
    Device device = 2;
    // The update mask app  lies to the resource. For the `FieldMask` definition,
    // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
    // google.protobuf.FieldMask update_mask = 3;
}

// DeleteDeviceRequest defines the data required to delete an existing device
message DeleteDeviceRequest {
    // The device path name, 
    // eg: "/domains/home-iot/devices/esp32-01"
    string name = 1;
}

// Process defines how a device is programmed
message Process {
    // The model of the device this process is intended to run on
    // eg: ESP32, NANO, UNO
    string model = 6;
    // The unique label assigned to this process 
    // eg: "blink"
    string label = 1;
    // The device activated by this process
    // eg: "/home-iot/devices/esp32-01"
    string devicekey = 2;
    // The purpose or description of the actions take by this process
    // eg: "Blink at prescribed intervals"
    string purpose = 3;
    // The setup stage defines the actions to take once
    // before entering the process loop
    repeated Action setup = 4;
    // The loop defines the actions that repeats forever
    repeated Action loop = 5;
}

// ListProcessesRequest defines the data required to get a list of processes
message ListProcessesRequest {
    // The parent model, eg: "ESP32".
    string parent = 1;
    // The maximum number of processes to return.
    int32 page_size = 2;
    // The next_page_token value returned from a previous List request, if any.
    string page_token = 3;
}

// GetProcessRequest defines the data required to get a Process
message GetProcessRequest {
    // The Process path name, 
    // eg: "/models/ESP32/processes/esp32-01"
    string name = 1;
}

// ListProcessesResponse defines the return value to a ListprocessesRequest
message ListProcessesResponse {
    // processes listed
    repeated Process processes = 1;
    // next page
    string next_page_token = 2;
}

// CreateProcessRequest defines the data required to create a new Process
message CreateProcessRequest {
    // The parent model name
    // eg: /models/ESP32
    string parent = 1;
    // The Process resource to create.
    Process Process = 2;
}

// UpdateProcessRequest defines the data required to update an existing Process
message UpdateProcessRequest {
    // The Process path name, 
    // eg: "/models/ESP32/processes/esp32-01"
    string name = 1;
    // The replacement Process
    Process Process = 2;
    // The update mask app  lies to the resource. For the `FieldMask` definition,
    // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
    // google.protobuf.FieldMask update_mask = 3;
}


// DeleteProcessRequest defines the data required to delete an existing Process
message DeleteProcessRequest {
    // The Process path name, 
    // eg: "/models/ESP32/processes/esp32-01"
    string name = 1;
}

