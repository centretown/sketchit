syntax = "proto3";
package centretown.sketchit.v1;

option go_package = "github.com/centretown/sketchit/api";

import public "collection.proto";

// Deputy
message Deputy {
    // label assigned to this deputy version
    string label = 1;
    // version of release
    string version = 2;
    // ordered list of skills
    repeated Skill skills = 3;
    // features map keyed on feature flag and label
    repeated Feature features = 4;
    // skills map keyed on tasks and alternates
    map<int32,Skill> skillset = 5;
    // ordered list of skills
    map<int32,Feature> gallery = 6;
    // Collections of items or documents
    repeated Collection collections = 7;
    // Dictionary provides a pathway to the item collections.
    // Items include application documents and the documents 
    // that decsribe the semanatics of the deputy api.
    // The api provides access to the sketchit services.
    //
    // Map to models to routes.
    // Routes are strings of text composed of labels 
    // split by separators.
    // Labels are unique to a collection, should have meaning
    // and must exclude separators.
    // Separators can be periods '.' or forward slashes '/'
    // Route structure:
    // <root>. single separator
    //   <collection>. collection label
    //     <parent>. route to ancestors
    //       <label>.
    //         <model>...
    // <model>
    //   <items>... values, arrays, maps and models
    map<string,Model> dictionary = 8;
}

// Skill in the skillset.
message Skill {
    // the task this skill effects
    Task task = 1;
    // alternate codes for the task
    repeated string alternates = 2;
    // description of skill
    string description = 3;
    // summary of usage
    Summary summary = 4;
}

// task list
enum Task {
    exit = 0;
    help = 1;
    list = 2;
    goto = 3;
    save = 4;
    remove = 5;
    hello = 6;
    TASK_LEN = 7;
}

// Summary description of model
message Summary {
    string usage = 1;
    string syntax = 2;
    repeated string examples = 3;
}

// Gallery of features keyed to flags and labels
message Gallery {
    map<uint64,Feature> flag_map = 1;
}

// Feature can describes how to respond to input and 
// how to present the output.
message Feature {
    enum Flag {
        // format
        f = 0;
        // projection (d for detail)
        d = 1;
        // auto reply
        auto = 2;
    }
    // flag to indicate feature
    Flag flag = 1;
    // unique label to reference feature
    string label = 2;
    string description = 3;
    Summary summary = 4;
}

// Presentation defines the features
// used to present output and respond to input
message Presentation {
    // Format to present (yaml,json,xml)
    Format format = 1;
    // Projection detail (full,summary,brief)
    repeated Projection projection = 2;
    // Auto reply to confirmations. (off,y,n)
    Auto confirm = 3;
}

// Format defines the options
enum Format {
	// deputy output yaml
    yaml = 0;
	// deputy output json
    json = 1;
	// deputy output xml
    xml = 2;
}

// Projection defines the level of detail
// that is presented
enum Projection {
	// no reduction
    full = 0;
	// less detail than full
    summary = 1;
	// key, value pair
    brief = 2;
}
// values for 'auto' features
enum Auto {
    // turn off auto
    off = 0;
    // auto reply yes
    y = 1;
    // auto reply no
    n = 2;
}
