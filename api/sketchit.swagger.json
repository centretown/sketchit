{
  "swagger": "2.0",
  "info": {
    "title": "sketchit.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/1/ping": {
      "post": {
        "operationId": "Sketchit_SayHello",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PingMessage"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PingMessage"
            }
          }
        ],
        "tags": [
          "Sketchit"
        ]
      }
    },
    "/v1/collections": {
      "get": {
        "operationId": "Sketchit_ListCollections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCollectionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "presentation.format",
            "description": "Format to present (yaml,json,xml).\n\n - yaml: deputy output yaml\n - json: deputy output json\n - xml: deputy output xml",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "yaml",
              "json",
              "xml"
            ],
            "default": "yaml"
          },
          {
            "name": "presentation.projection",
            "description": "Projection detail (full,summary,brief).\n\n - full: no reduction\n - summary: less detail than full\n - brief: key, value pair",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "full",
                "summary",
                "brief"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "presentation.confirm",
            "description": "Auto reply to confirmations. (off,y,n).\n\n - off: turn off auto\n - y: auto reply yes\n - n: auto reply no",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "off",
              "y",
              "n"
            ],
            "default": "off"
          }
        ],
        "tags": [
          "Sketchit"
        ]
      }
    },
    "/v1/{name=*/*/*/*}": {
      "get": {
        "operationId": "Sketchit_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protobufAny"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The path name, \neg: \"sectors/home-iot/devices/esp32-01\"\neg: \"toolkits/esp32/sketches/blink-01\"",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Sketchit"
        ]
      },
      "delete": {
        "operationId": "Sketchit_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The device path name, \neg: \"sectors/home-iot/devices/esp32-01\"\neg: \"toolkits/ESP32/sketches/blink-01\"",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Sketchit"
        ]
      },
      "patch": {
        "operationId": "Sketchit_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protobufAny"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The path name, \neg: \"sectors/home-iot/devices/esp32-01\"\neg: \"toolkits/ESP32/sketches/blink-01\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The replacement item",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protobufAny"
            }
          }
        ],
        "tags": [
          "Sketchit"
        ]
      }
    },
    "/v1/{name=deputies/*}": {
      "get": {
        "operationId": "Sketchit_GetDeputy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Deputy"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The deputy label, \neg: \"/deputies/Andy\"",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Sketchit"
        ]
      }
    },
    "/v1/{parent=*/*/*}": {
      "get": {
        "operationId": "Sketchit_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The parent \neg: \"sectors/home-iot/devices\"\neg: \"toolkits/esp32/sketches\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "The maximum number of devices to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "The next_page_token value returned from a previous List request, if any.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Sketchit"
        ]
      },
      "post": {
        "operationId": "Sketchit_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protobufAny"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The parent sector name\neg: \"sectors/home-iot/devices\"\neg: \"toolkits/esp32/sketches\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The device resource to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protobufAny"
            }
          }
        ],
        "tags": [
          "Sketchit"
        ]
      }
    }
  },
  "definitions": {
    "FeatureFlag": {
      "type": "string",
      "enum": [
        "f",
        "d",
        "auto"
      ],
      "default": "f",
      "title": "- f: format\n - d: projection (d for detail)\n - auto: auto reply"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Auto": {
      "type": "string",
      "enum": [
        "off",
        "y",
        "n"
      ],
      "default": "off",
      "description": "- off: turn off auto\n - y: auto reply yes\n - n: auto reply no",
      "title": "values for 'auto' features"
    },
    "v1Collection": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of the collection"
        },
        "type": {
          "type": "string",
          "title": "type is mostly \"collection\""
        },
        "readOnly": {
          "type": "boolean",
          "format": "boolean",
          "title": "readOnly indicates the update status"
        },
        "model": {
          "$ref": "#/definitions/v1Model",
          "title": "model describes \nof each document in the collection"
        }
      },
      "title": "Collection of stored items"
    },
    "v1Deputy": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "label assigned to this deputy version"
        },
        "version": {
          "type": "string",
          "title": "version of release"
        },
        "skills": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Skill"
          },
          "title": "ordered list of skills"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Feature"
          },
          "title": "features map keyed on feature flag and label"
        },
        "skillset": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Skill"
          },
          "title": "skills map keyed on tasks and alternates"
        },
        "gallery": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Feature"
          },
          "title": "ordered list of skills"
        },
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Collection"
          },
          "title": "Collections of items or documents"
        },
        "dictionary": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Model"
          },
          "description": "Dictionary provides a pathway to the item collections.\nItems include application documents and the documents \nthat decsribe the semanatics of the deputy api.\nThe api provides access to the sketchit services.\n\nMap to models to routes.\nRoutes are strings of text composed of labels \nsplit by separators.\nLabels are unique to a collection, should have meaning\nand must exclude separators.\nSeparators can be periods '.' or forward slashes '/'\nRoute structure:\n\u003croot\u003e. single separator\n  \u003ccollection\u003e. collection label\n    \u003cparent\u003e. route to ancestors\n      \u003clabel\u003e.\n        \u003cmodel\u003e...\n\u003cmodel\u003e\n  \u003citems\u003e... values, arrays, maps and models"
        }
      },
      "title": "Deputy"
    },
    "v1Feature": {
      "type": "object",
      "properties": {
        "flag": {
          "$ref": "#/definitions/FeatureFlag",
          "title": "flag to indicate feature"
        },
        "label": {
          "type": "string",
          "title": "unique label to reference feature"
        },
        "description": {
          "type": "string"
        },
        "summary": {
          "$ref": "#/definitions/v1Summary"
        }
      },
      "description": "Feature can describes how to respond to input and \nhow to present the output."
    },
    "v1Format": {
      "type": "string",
      "enum": [
        "yaml",
        "json",
        "xml"
      ],
      "default": "yaml",
      "description": "- yaml: deputy output yaml\n - json: deputy output json\n - xml: deputy output xml",
      "title": "Format defines the options"
    },
    "v1ListCollectionsResponse": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Collection"
          }
        }
      },
      "title": "ListCollectionsResponse -"
    },
    "v1ListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "title": "items listed"
        },
        "next_page_token": {
          "type": "string",
          "title": "next page"
        }
      },
      "title": "ListResponse defines the return value to a ListRequest"
    },
    "v1Model": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "label used for route"
        },
        "title": {
          "type": "string",
          "title": "model title for presentation"
        },
        "type": {
          "type": "string",
          "title": "type of data represented"
        },
        "description": {
          "type": "string",
          "title": "description of the model"
        },
        "uniqueItems": {
          "type": "boolean",
          "format": "boolean",
          "title": "uniqueItems constrains items to be unique"
        },
        "items": {
          "$ref": "#/definitions/v1Model",
          "title": "item list definition"
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "required properties and order"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "options constrains model to an array of choices"
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Model"
          },
          "title": "oneOf a selection of Schemas"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Model"
          },
          "title": "properties defines an ordered list of children\norder determined by required array"
        }
      },
      "title": "Model defines the attributes of a collected item"
    },
    "v1PingMessage": {
      "type": "object",
      "properties": {
        "greeting": {
          "type": "string"
        }
      }
    },
    "v1Presentation": {
      "type": "object",
      "properties": {
        "format": {
          "$ref": "#/definitions/v1Format",
          "title": "Format to present (yaml,json,xml)"
        },
        "projection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Projection"
          },
          "title": "Projection detail (full,summary,brief)"
        },
        "confirm": {
          "$ref": "#/definitions/v1Auto",
          "title": "Auto reply to confirmations. (off,y,n)"
        }
      },
      "title": "Presentation defines the features\nused to present output and respond to input"
    },
    "v1Projection": {
      "type": "string",
      "enum": [
        "full",
        "summary",
        "brief"
      ],
      "default": "full",
      "description": "- full: no reduction\n - summary: less detail than full\n - brief: key, value pair",
      "title": "Projection defines the level of detail\nthat is presented"
    },
    "v1Skill": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task",
          "title": "the task this skill effects"
        },
        "alternates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "alternate codes for the task"
        },
        "description": {
          "type": "string",
          "title": "description of skill"
        },
        "summary": {
          "$ref": "#/definitions/v1Summary",
          "title": "summary of usage"
        }
      },
      "description": "Skill in the skillset."
    },
    "v1Summary": {
      "type": "object",
      "properties": {
        "usage": {
          "type": "string"
        },
        "syntax": {
          "type": "string"
        },
        "examples": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Summary description of model"
    },
    "v1Task": {
      "type": "string",
      "enum": [
        "exit",
        "help",
        "list",
        "goto",
        "save",
        "remove",
        "hello"
      ],
      "default": "exit",
      "title": "task list"
    }
  }
}
