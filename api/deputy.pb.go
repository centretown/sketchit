// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: deputy.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// task list
type Task int32

const (
	Task_exit     Task = 0
	Task_help     Task = 1
	Task_list     Task = 2
	Task_goto     Task = 3
	Task_save     Task = 4
	Task_remove   Task = 5
	Task_hello    Task = 6
	Task_TASK_LEN Task = 7
)

// Enum value maps for Task.
var (
	Task_name = map[int32]string{
		0: "exit",
		1: "help",
		2: "list",
		3: "goto",
		4: "save",
		5: "remove",
		6: "hello",
		7: "TASK_LEN",
	}
	Task_value = map[string]int32{
		"exit":     0,
		"help":     1,
		"list":     2,
		"goto":     3,
		"save":     4,
		"remove":   5,
		"hello":    6,
		"TASK_LEN": 7,
	}
)

func (x Task) Enum() *Task {
	p := new(Task)
	*p = x
	return p
}

func (x Task) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task) Descriptor() protoreflect.EnumDescriptor {
	return file_deputy_proto_enumTypes[0].Descriptor()
}

func (Task) Type() protoreflect.EnumType {
	return &file_deputy_proto_enumTypes[0]
}

func (x Task) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task.Descriptor instead.
func (Task) EnumDescriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{0}
}

// Format defines the options
type Format int32

const (
	// deputy output yaml
	Format_yaml Format = 0
	// deputy output json
	Format_json Format = 1
	// deputy output xml
	Format_xml Format = 2
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0: "yaml",
		1: "json",
		2: "xml",
	}
	Format_value = map[string]int32{
		"yaml": 0,
		"json": 1,
		"xml":  2,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_deputy_proto_enumTypes[1].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_deputy_proto_enumTypes[1]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{1}
}

// Projection defines the level of detail
// that is presented
type Projection int32

const (
	// no reduction
	Projection_full Projection = 0
	// less detail than full
	Projection_summary Projection = 1
	// key, value pair
	Projection_brief Projection = 2
)

// Enum value maps for Projection.
var (
	Projection_name = map[int32]string{
		0: "full",
		1: "summary",
		2: "brief",
	}
	Projection_value = map[string]int32{
		"full":    0,
		"summary": 1,
		"brief":   2,
	}
)

func (x Projection) Enum() *Projection {
	p := new(Projection)
	*p = x
	return p
}

func (x Projection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Projection) Descriptor() protoreflect.EnumDescriptor {
	return file_deputy_proto_enumTypes[2].Descriptor()
}

func (Projection) Type() protoreflect.EnumType {
	return &file_deputy_proto_enumTypes[2]
}

func (x Projection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Projection.Descriptor instead.
func (Projection) EnumDescriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{2}
}

// values for 'auto' features
type Auto int32

const (
	// turn off auto
	Auto_off Auto = 0
	// auto reply yes
	Auto_y Auto = 1
	// auto reply no
	Auto_n Auto = 2
)

// Enum value maps for Auto.
var (
	Auto_name = map[int32]string{
		0: "off",
		1: "y",
		2: "n",
	}
	Auto_value = map[string]int32{
		"off": 0,
		"y":   1,
		"n":   2,
	}
)

func (x Auto) Enum() *Auto {
	p := new(Auto)
	*p = x
	return p
}

func (x Auto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Auto) Descriptor() protoreflect.EnumDescriptor {
	return file_deputy_proto_enumTypes[3].Descriptor()
}

func (Auto) Type() protoreflect.EnumType {
	return &file_deputy_proto_enumTypes[3]
}

func (x Auto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Auto.Descriptor instead.
func (Auto) EnumDescriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{3}
}

type Feature_Flag int32

const (
	// format
	Feature_f Feature_Flag = 0
	// projection (d for detail)
	Feature_d Feature_Flag = 1
	// auto reply
	Feature_auto Feature_Flag = 2
)

// Enum value maps for Feature_Flag.
var (
	Feature_Flag_name = map[int32]string{
		0: "f",
		1: "d",
		2: "auto",
	}
	Feature_Flag_value = map[string]int32{
		"f":    0,
		"d":    1,
		"auto": 2,
	}
)

func (x Feature_Flag) Enum() *Feature_Flag {
	p := new(Feature_Flag)
	*p = x
	return p
}

func (x Feature_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Feature_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_deputy_proto_enumTypes[4].Descriptor()
}

func (Feature_Flag) Type() protoreflect.EnumType {
	return &file_deputy_proto_enumTypes[4]
}

func (x Feature_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Feature_Flag.Descriptor instead.
func (Feature_Flag) EnumDescriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{4, 0}
}

// Deputy
type Deputy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// label assigned to this deputy version
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// version of release
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// ordered list of skills
	Skills []*Skill `protobuf:"bytes,3,rep,name=skills,proto3" json:"skills,omitempty"`
	// features map keyed on feature flag and label
	Features []*Feature `protobuf:"bytes,4,rep,name=features,proto3" json:"features,omitempty"`
	// skills map keyed on tasks and alternates
	Skillset map[int32]*Skill `protobuf:"bytes,5,rep,name=skillset,proto3" json:"skillset,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ordered list of skills
	Gallery map[int32]*Feature `protobuf:"bytes,6,rep,name=gallery,proto3" json:"gallery,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Collections of items or documents
	Collections []*Collection `protobuf:"bytes,7,rep,name=collections,proto3" json:"collections,omitempty"`
	// Dictionary provides a pathway to the item collections.
	// Items include application documents and the documents
	// that decsribe the semanatics of the deputy api.
	// The api provides access to the sketchit services.
	//
	// Map to models to routes.
	// Routes are strings of text composed of labels
	// split by separators.
	// Labels are unique to a collection, should have meaning
	// and must exclude separators.
	// Separators can be periods '.' or forward slashes '/'
	// Route structure:
	// <root>. single separator
	//   <collection>. collection label
	//     <parent>. route to ancestors
	//       <label>.
	//         <model>...
	// <model>
	//   <items>... values, arrays, maps and models
	Dictionary map[string]*Model `protobuf:"bytes,8,rep,name=dictionary,proto3" json:"dictionary,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Deputy) Reset() {
	*x = Deputy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deputy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deputy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deputy) ProtoMessage() {}

func (x *Deputy) ProtoReflect() protoreflect.Message {
	mi := &file_deputy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deputy.ProtoReflect.Descriptor instead.
func (*Deputy) Descriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{0}
}

func (x *Deputy) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Deputy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Deputy) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *Deputy) GetFeatures() []*Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Deputy) GetSkillset() map[int32]*Skill {
	if x != nil {
		return x.Skillset
	}
	return nil
}

func (x *Deputy) GetGallery() map[int32]*Feature {
	if x != nil {
		return x.Gallery
	}
	return nil
}

func (x *Deputy) GetCollections() []*Collection {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *Deputy) GetDictionary() map[string]*Model {
	if x != nil {
		return x.Dictionary
	}
	return nil
}

// Skill in the skillset.
type Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the task this skill effects
	Task Task `protobuf:"varint,1,opt,name=task,proto3,enum=centretown.sketchit.v1.Task" json:"task,omitempty"`
	// alternate codes for the task
	Alternates []string `protobuf:"bytes,2,rep,name=alternates,proto3" json:"alternates,omitempty"`
	// description of skill
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// summary of usage
	Summary *Summary `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *Skill) Reset() {
	*x = Skill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deputy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skill) ProtoMessage() {}

func (x *Skill) ProtoReflect() protoreflect.Message {
	mi := &file_deputy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skill.ProtoReflect.Descriptor instead.
func (*Skill) Descriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{1}
}

func (x *Skill) GetTask() Task {
	if x != nil {
		return x.Task
	}
	return Task_exit
}

func (x *Skill) GetAlternates() []string {
	if x != nil {
		return x.Alternates
	}
	return nil
}

func (x *Skill) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Skill) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// Summary description of model
type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage    string   `protobuf:"bytes,1,opt,name=usage,proto3" json:"usage,omitempty"`
	Syntax   string   `protobuf:"bytes,2,opt,name=syntax,proto3" json:"syntax,omitempty"`
	Examples []string `protobuf:"bytes,3,rep,name=examples,proto3" json:"examples,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deputy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_deputy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{2}
}

func (x *Summary) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Summary) GetSyntax() string {
	if x != nil {
		return x.Syntax
	}
	return ""
}

func (x *Summary) GetExamples() []string {
	if x != nil {
		return x.Examples
	}
	return nil
}

// Gallery of features keyed to flags and labels
type Gallery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagMap map[uint64]*Feature `protobuf:"bytes,1,rep,name=flag_map,json=flagMap,proto3" json:"flag_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Gallery) Reset() {
	*x = Gallery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deputy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gallery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gallery) ProtoMessage() {}

func (x *Gallery) ProtoReflect() protoreflect.Message {
	mi := &file_deputy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gallery.ProtoReflect.Descriptor instead.
func (*Gallery) Descriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{3}
}

func (x *Gallery) GetFlagMap() map[uint64]*Feature {
	if x != nil {
		return x.FlagMap
	}
	return nil
}

// Feature can describes how to respond to input and
// how to present the output.
type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to indicate feature
	Flag Feature_Flag `protobuf:"varint,1,opt,name=flag,proto3,enum=centretown.sketchit.v1.Feature_Flag" json:"flag,omitempty"`
	// unique label to reference feature
	Label       string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Summary     *Summary `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deputy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_deputy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{4}
}

func (x *Feature) GetFlag() Feature_Flag {
	if x != nil {
		return x.Flag
	}
	return Feature_f
}

func (x *Feature) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Feature) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Feature) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// Presentation defines the features
// used to present output and respond to input
type Presentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format to present (yaml,json,xml)
	Format Format `protobuf:"varint,1,opt,name=format,proto3,enum=centretown.sketchit.v1.Format" json:"format,omitempty"`
	// Projection detail (full,summary,brief)
	Projection []Projection `protobuf:"varint,2,rep,packed,name=projection,proto3,enum=centretown.sketchit.v1.Projection" json:"projection,omitempty"`
	// Auto reply to confirmations. (off,y,n)
	Confirm Auto `protobuf:"varint,3,opt,name=confirm,proto3,enum=centretown.sketchit.v1.Auto" json:"confirm,omitempty"`
}

func (x *Presentation) Reset() {
	*x = Presentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deputy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation) ProtoMessage() {}

func (x *Presentation) ProtoReflect() protoreflect.Message {
	mi := &file_deputy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation.ProtoReflect.Descriptor instead.
func (*Presentation) Descriptor() ([]byte, []int) {
	return file_deputy_proto_rawDescGZIP(), []int{5}
}

func (x *Presentation) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_yaml
}

func (x *Presentation) GetProjection() []Projection {
	if x != nil {
		return x.Projection
	}
	return nil
}

func (x *Presentation) GetConfirm() Auto {
	if x != nil {
		return x.Confirm
	}
	return Auto_off
}

var File_deputy_proto protoreflect.FileDescriptor

var file_deputy_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x75, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x05, 0x0a, 0x06, 0x44, 0x65, 0x70,
	0x75, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x75, 0x74, 0x79, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x65,
	0x74, 0x12, 0x45, 0x0a, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x75,
	0x74, 0x79, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e,
	0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x75,
	0x74, 0x79, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x1a, 0x5a,
	0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x0c, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x0f, 0x44, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x53,
	0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x07, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12,
	0x47, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x1a, 0x5b, 0x0a, 0x0c, 0x46, 0x6c, 0x61, 0x67,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x1e,
	0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x05, 0x0a, 0x01, 0x66, 0x10, 0x00, 0x12, 0x05, 0x0a,
	0x01, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x02, 0x22, 0xc2,
	0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x2a, 0x5d, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x08, 0x0a, 0x04, 0x65,
	0x78, 0x69, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x74,
	0x6f, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x4e,
	0x10, 0x07, 0x2a, 0x25, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04,
	0x79, 0x61, 0x6d, 0x6c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x78, 0x6d, 0x6c, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x10, 0x02, 0x2a, 0x1d, 0x0a, 0x04, 0x41, 0x75, 0x74,
	0x6f, 0x12, 0x07, 0x0a, 0x03, 0x6f, 0x66, 0x66, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x79, 0x10,
	0x01, 0x12, 0x05, 0x0a, 0x01, 0x6e, 0x10, 0x02, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77,
	0x6e, 0x2f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x50, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deputy_proto_rawDescOnce sync.Once
	file_deputy_proto_rawDescData = file_deputy_proto_rawDesc
)

func file_deputy_proto_rawDescGZIP() []byte {
	file_deputy_proto_rawDescOnce.Do(func() {
		file_deputy_proto_rawDescData = protoimpl.X.CompressGZIP(file_deputy_proto_rawDescData)
	})
	return file_deputy_proto_rawDescData
}

var file_deputy_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_deputy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_deputy_proto_goTypes = []interface{}{
	(Task)(0),            // 0: centretown.sketchit.v1.Task
	(Format)(0),          // 1: centretown.sketchit.v1.Format
	(Projection)(0),      // 2: centretown.sketchit.v1.Projection
	(Auto)(0),            // 3: centretown.sketchit.v1.Auto
	(Feature_Flag)(0),    // 4: centretown.sketchit.v1.Feature.Flag
	(*Deputy)(nil),       // 5: centretown.sketchit.v1.Deputy
	(*Skill)(nil),        // 6: centretown.sketchit.v1.Skill
	(*Summary)(nil),      // 7: centretown.sketchit.v1.Summary
	(*Gallery)(nil),      // 8: centretown.sketchit.v1.Gallery
	(*Feature)(nil),      // 9: centretown.sketchit.v1.Feature
	(*Presentation)(nil), // 10: centretown.sketchit.v1.Presentation
	nil,                  // 11: centretown.sketchit.v1.Deputy.SkillsetEntry
	nil,                  // 12: centretown.sketchit.v1.Deputy.GalleryEntry
	nil,                  // 13: centretown.sketchit.v1.Deputy.DictionaryEntry
	nil,                  // 14: centretown.sketchit.v1.Gallery.FlagMapEntry
	(*Collection)(nil),   // 15: centretown.sketchit.v1.Collection
	(*Model)(nil),        // 16: centretown.sketchit.v1.Model
}
var file_deputy_proto_depIdxs = []int32{
	6,  // 0: centretown.sketchit.v1.Deputy.skills:type_name -> centretown.sketchit.v1.Skill
	9,  // 1: centretown.sketchit.v1.Deputy.features:type_name -> centretown.sketchit.v1.Feature
	11, // 2: centretown.sketchit.v1.Deputy.skillset:type_name -> centretown.sketchit.v1.Deputy.SkillsetEntry
	12, // 3: centretown.sketchit.v1.Deputy.gallery:type_name -> centretown.sketchit.v1.Deputy.GalleryEntry
	15, // 4: centretown.sketchit.v1.Deputy.collections:type_name -> centretown.sketchit.v1.Collection
	13, // 5: centretown.sketchit.v1.Deputy.dictionary:type_name -> centretown.sketchit.v1.Deputy.DictionaryEntry
	0,  // 6: centretown.sketchit.v1.Skill.task:type_name -> centretown.sketchit.v1.Task
	7,  // 7: centretown.sketchit.v1.Skill.summary:type_name -> centretown.sketchit.v1.Summary
	14, // 8: centretown.sketchit.v1.Gallery.flag_map:type_name -> centretown.sketchit.v1.Gallery.FlagMapEntry
	4,  // 9: centretown.sketchit.v1.Feature.flag:type_name -> centretown.sketchit.v1.Feature.Flag
	7,  // 10: centretown.sketchit.v1.Feature.summary:type_name -> centretown.sketchit.v1.Summary
	1,  // 11: centretown.sketchit.v1.Presentation.format:type_name -> centretown.sketchit.v1.Format
	2,  // 12: centretown.sketchit.v1.Presentation.projection:type_name -> centretown.sketchit.v1.Projection
	3,  // 13: centretown.sketchit.v1.Presentation.confirm:type_name -> centretown.sketchit.v1.Auto
	6,  // 14: centretown.sketchit.v1.Deputy.SkillsetEntry.value:type_name -> centretown.sketchit.v1.Skill
	9,  // 15: centretown.sketchit.v1.Deputy.GalleryEntry.value:type_name -> centretown.sketchit.v1.Feature
	16, // 16: centretown.sketchit.v1.Deputy.DictionaryEntry.value:type_name -> centretown.sketchit.v1.Model
	9,  // 17: centretown.sketchit.v1.Gallery.FlagMapEntry.value:type_name -> centretown.sketchit.v1.Feature
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_deputy_proto_init() }
func file_deputy_proto_init() {
	if File_deputy_proto != nil {
		return
	}
	file_collection_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_deputy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deputy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deputy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deputy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deputy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gallery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deputy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deputy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deputy_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_deputy_proto_goTypes,
		DependencyIndexes: file_deputy_proto_depIdxs,
		EnumInfos:         file_deputy_proto_enumTypes,
		MessageInfos:      file_deputy_proto_msgTypes,
	}.Build()
	File_deputy_proto = out.File
	file_deputy_proto_rawDesc = nil
	file_deputy_proto_goTypes = nil
	file_deputy_proto_depIdxs = nil
}
