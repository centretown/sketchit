// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: sketchit.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	annotations "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Symbols defined in public import of google/protobuf/empty.proto.

type Empty = empty.Empty

// Symbols defined in public import of google/api/annotations.proto.

var E_Http = annotations.E_Http

type PingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Greeting string `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
}

func (x *PingMessage) Reset() {
	*x = PingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMessage) ProtoMessage() {}

func (x *PingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMessage.ProtoReflect.Descriptor instead.
func (*PingMessage) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{0}
}

func (x *PingMessage) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

var File_sketchit_proto protoreflect.FileDescriptor

var file_sketchit_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x29, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x32, 0xd7, 0x0c, 0x0a,
	0x08, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x12, 0x68, 0x0a, 0x08, 0x53, 0x61, 0x79,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x23, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22, 0x07, 0x2f, 0x31, 0x2f, 0x70, 0x69, 0x6e, 0x67,
	0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x32, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x7b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x91, 0x01, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2b, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x7d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x28, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0x8b, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x12, 0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x3a, 0x06, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x8b, 0x01,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x2b,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74,
	0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x32, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x06, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x7b, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2f,
	0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x50, 0x00, 0x50, 0x01,
	0x50, 0x02, 0x50, 0x03, 0x50, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sketchit_proto_rawDescOnce sync.Once
	file_sketchit_proto_rawDescData = file_sketchit_proto_rawDesc
)

func file_sketchit_proto_rawDescGZIP() []byte {
	file_sketchit_proto_rawDescOnce.Do(func() {
		file_sketchit_proto_rawDescData = protoimpl.X.CompressGZIP(file_sketchit_proto_rawDescData)
	})
	return file_sketchit_proto_rawDescData
}

var file_sketchit_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_sketchit_proto_goTypes = []interface{}{
	(*PingMessage)(nil),             // 0: centretown.sketchit.v1.PingMessage
	(*ListDevicesRequest)(nil),      // 1: centretown.sketchit.v1.ListDevicesRequest
	(*GetDeviceRequest)(nil),        // 2: centretown.sketchit.v1.GetDeviceRequest
	(*CreateDeviceRequest)(nil),     // 3: centretown.sketchit.v1.CreateDeviceRequest
	(*UpdateDeviceRequest)(nil),     // 4: centretown.sketchit.v1.UpdateDeviceRequest
	(*DeleteDeviceRequest)(nil),     // 5: centretown.sketchit.v1.DeleteDeviceRequest
	(*ListSketchesRequest)(nil),     // 6: centretown.sketchit.v1.ListSketchesRequest
	(*GetSketchRequest)(nil),        // 7: centretown.sketchit.v1.GetSketchRequest
	(*CreateSketchRequest)(nil),     // 8: centretown.sketchit.v1.CreateSketchRequest
	(*UpdateSketchRequest)(nil),     // 9: centretown.sketchit.v1.UpdateSketchRequest
	(*DeleteSketchRequest)(nil),     // 10: centretown.sketchit.v1.DeleteSketchRequest
	(*ListCollectionsRequest)(nil),  // 11: centretown.sketchit.v1.ListCollectionsRequest
	(*ListDevicesResponse)(nil),     // 12: centretown.sketchit.v1.ListDevicesResponse
	(*Device)(nil),                  // 13: centretown.sketchit.v1.Device
	(*empty.Empty)(nil),             // 14: google.protobuf.Empty
	(*ListSketchesResponse)(nil),    // 15: centretown.sketchit.v1.ListSketchesResponse
	(*Sketch)(nil),                  // 16: centretown.sketchit.v1.Sketch
	(*ListCollectionsResponse)(nil), // 17: centretown.sketchit.v1.ListCollectionsResponse
}
var file_sketchit_proto_depIdxs = []int32{
	0,  // 0: centretown.sketchit.v1.Sketchit.SayHello:input_type -> centretown.sketchit.v1.PingMessage
	1,  // 1: centretown.sketchit.v1.Sketchit.ListDevices:input_type -> centretown.sketchit.v1.ListDevicesRequest
	2,  // 2: centretown.sketchit.v1.Sketchit.GetDevice:input_type -> centretown.sketchit.v1.GetDeviceRequest
	3,  // 3: centretown.sketchit.v1.Sketchit.CreateDevice:input_type -> centretown.sketchit.v1.CreateDeviceRequest
	4,  // 4: centretown.sketchit.v1.Sketchit.UpdateDevice:input_type -> centretown.sketchit.v1.UpdateDeviceRequest
	5,  // 5: centretown.sketchit.v1.Sketchit.DeleteDevice:input_type -> centretown.sketchit.v1.DeleteDeviceRequest
	6,  // 6: centretown.sketchit.v1.Sketchit.ListSketches:input_type -> centretown.sketchit.v1.ListSketchesRequest
	7,  // 7: centretown.sketchit.v1.Sketchit.GetSketch:input_type -> centretown.sketchit.v1.GetSketchRequest
	8,  // 8: centretown.sketchit.v1.Sketchit.CreateSketch:input_type -> centretown.sketchit.v1.CreateSketchRequest
	9,  // 9: centretown.sketchit.v1.Sketchit.UpdateSketch:input_type -> centretown.sketchit.v1.UpdateSketchRequest
	10, // 10: centretown.sketchit.v1.Sketchit.DeleteSketch:input_type -> centretown.sketchit.v1.DeleteSketchRequest
	11, // 11: centretown.sketchit.v1.Sketchit.ListCollections:input_type -> centretown.sketchit.v1.ListCollectionsRequest
	0,  // 12: centretown.sketchit.v1.Sketchit.SayHello:output_type -> centretown.sketchit.v1.PingMessage
	12, // 13: centretown.sketchit.v1.Sketchit.ListDevices:output_type -> centretown.sketchit.v1.ListDevicesResponse
	13, // 14: centretown.sketchit.v1.Sketchit.GetDevice:output_type -> centretown.sketchit.v1.Device
	13, // 15: centretown.sketchit.v1.Sketchit.CreateDevice:output_type -> centretown.sketchit.v1.Device
	13, // 16: centretown.sketchit.v1.Sketchit.UpdateDevice:output_type -> centretown.sketchit.v1.Device
	14, // 17: centretown.sketchit.v1.Sketchit.DeleteDevice:output_type -> google.protobuf.Empty
	15, // 18: centretown.sketchit.v1.Sketchit.ListSketches:output_type -> centretown.sketchit.v1.ListSketchesResponse
	16, // 19: centretown.sketchit.v1.Sketchit.GetSketch:output_type -> centretown.sketchit.v1.Sketch
	16, // 20: centretown.sketchit.v1.Sketchit.CreateSketch:output_type -> centretown.sketchit.v1.Sketch
	16, // 21: centretown.sketchit.v1.Sketchit.UpdateSketch:output_type -> centretown.sketchit.v1.Sketch
	14, // 22: centretown.sketchit.v1.Sketchit.DeleteSketch:output_type -> google.protobuf.Empty
	17, // 23: centretown.sketchit.v1.Sketchit.ListCollections:output_type -> centretown.sketchit.v1.ListCollectionsResponse
	12, // [12:24] is the sub-list for method output_type
	0,  // [0:12] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_sketchit_proto_init() }
func file_sketchit_proto_init() {
	if File_sketchit_proto != nil {
		return
	}
	file_device_proto_init()
	file_sketch_proto_init()
	file_dictionary_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sketchit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sketchit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sketchit_proto_goTypes,
		DependencyIndexes: file_sketchit_proto_depIdxs,
		MessageInfos:      file_sketchit_proto_msgTypes,
	}.Build()
	File_sketchit_proto = out.File
	file_sketchit_proto_rawDesc = nil
	file_sketchit_proto_goTypes = nil
	file_sketchit_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SketchitClient is the client API for Sketchit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SketchitClient interface {
	SayHello(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListSketches(ctx context.Context, in *ListSketchesRequest, opts ...grpc.CallOption) (*ListSketchesResponse, error)
	GetSketch(ctx context.Context, in *GetSketchRequest, opts ...grpc.CallOption) (*Sketch, error)
	CreateSketch(ctx context.Context, in *CreateSketchRequest, opts ...grpc.CallOption) (*Sketch, error)
	UpdateSketch(ctx context.Context, in *UpdateSketchRequest, opts ...grpc.CallOption) (*Sketch, error)
	DeleteSketch(ctx context.Context, in *DeleteSketchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
}

type sketchitClient struct {
	cc grpc.ClientConnInterface
}

func NewSketchitClient(cc grpc.ClientConnInterface) SketchitClient {
	return &sketchitClient{cc}
}

func (c *sketchitClient) SayHello(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) ListSketches(ctx context.Context, in *ListSketchesRequest, opts ...grpc.CallOption) (*ListSketchesResponse, error) {
	out := new(ListSketchesResponse)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/ListSketches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) GetSketch(ctx context.Context, in *GetSketchRequest, opts ...grpc.CallOption) (*Sketch, error) {
	out := new(Sketch)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/GetSketch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) CreateSketch(ctx context.Context, in *CreateSketchRequest, opts ...grpc.CallOption) (*Sketch, error) {
	out := new(Sketch)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/CreateSketch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) UpdateSketch(ctx context.Context, in *UpdateSketchRequest, opts ...grpc.CallOption) (*Sketch, error) {
	out := new(Sketch)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/UpdateSketch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) DeleteSketch(ctx context.Context, in *DeleteSketchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/DeleteSketch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/ListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SketchitServer is the server API for Sketchit service.
type SketchitServer interface {
	SayHello(context.Context, *PingMessage) (*PingMessage, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*empty.Empty, error)
	ListSketches(context.Context, *ListSketchesRequest) (*ListSketchesResponse, error)
	GetSketch(context.Context, *GetSketchRequest) (*Sketch, error)
	CreateSketch(context.Context, *CreateSketchRequest) (*Sketch, error)
	UpdateSketch(context.Context, *UpdateSketchRequest) (*Sketch, error)
	DeleteSketch(context.Context, *DeleteSketchRequest) (*empty.Empty, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
}

// UnimplementedSketchitServer can be embedded to have forward compatible implementations.
type UnimplementedSketchitServer struct {
}

func (*UnimplementedSketchitServer) SayHello(context.Context, *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedSketchitServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedSketchitServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (*UnimplementedSketchitServer) CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedSketchitServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (*UnimplementedSketchitServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (*UnimplementedSketchitServer) ListSketches(context.Context, *ListSketchesRequest) (*ListSketchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSketches not implemented")
}
func (*UnimplementedSketchitServer) GetSketch(context.Context, *GetSketchRequest) (*Sketch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSketch not implemented")
}
func (*UnimplementedSketchitServer) CreateSketch(context.Context, *CreateSketchRequest) (*Sketch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSketch not implemented")
}
func (*UnimplementedSketchitServer) UpdateSketch(context.Context, *UpdateSketchRequest) (*Sketch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSketch not implemented")
}
func (*UnimplementedSketchitServer) DeleteSketch(context.Context, *DeleteSketchRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSketch not implemented")
}
func (*UnimplementedSketchitServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}

func RegisterSketchitServer(s *grpc.Server, srv SketchitServer) {
	s.RegisterService(&_Sketchit_serviceDesc, srv)
}

func _Sketchit_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).SayHello(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_ListSketches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSketchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).ListSketches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/ListSketches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).ListSketches(ctx, req.(*ListSketchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_GetSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSketchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).GetSketch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/GetSketch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).GetSketch(ctx, req.(*GetSketchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_CreateSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSketchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).CreateSketch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/CreateSketch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).CreateSketch(ctx, req.(*CreateSketchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_UpdateSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSketchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).UpdateSketch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/UpdateSketch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).UpdateSketch(ctx, req.(*UpdateSketchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_DeleteSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSketchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).DeleteSketch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/DeleteSketch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).DeleteSketch(ctx, req.(*DeleteSketchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sketchit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "centretown.sketchit.v1.Sketchit",
	HandlerType: (*SketchitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Sketchit_SayHello_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _Sketchit_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _Sketchit_GetDevice_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Sketchit_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _Sketchit_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Sketchit_DeleteDevice_Handler,
		},
		{
			MethodName: "ListSketches",
			Handler:    _Sketchit_ListSketches_Handler,
		},
		{
			MethodName: "GetSketch",
			Handler:    _Sketchit_GetSketch_Handler,
		},
		{
			MethodName: "CreateSketch",
			Handler:    _Sketchit_CreateSketch_Handler,
		},
		{
			MethodName: "UpdateSketch",
			Handler:    _Sketchit_UpdateSketch_Handler,
		},
		{
			MethodName: "DeleteSketch",
			Handler:    _Sketchit_DeleteSketch_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _Sketchit_ListCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sketchit.proto",
}
