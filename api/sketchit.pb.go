// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: sketchit.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	annotations "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Symbols defined in public import of google/protobuf/empty.proto.

type Empty = empty.Empty

// Symbols defined in public import of google/api/annotations.proto.

var E_Http = annotations.E_Http

// GetDeviceRequest defines the data required to get a device
type GetDeputyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deputy label,
	// eg: "/deputies/Andy"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDeputyRequest) Reset() {
	*x = GetDeputyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeputyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeputyRequest) ProtoMessage() {}

func (x *GetDeputyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeputyRequest.ProtoReflect.Descriptor instead.
func (*GetDeputyRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{0}
}

func (x *GetDeputyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ListCollectionsRequest -
type ListCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flags ignored when retrieved from storage
	Presentation *Presentation `protobuf:"bytes,1,opt,name=presentation,proto3" json:"presentation,omitempty"`
}

func (x *ListCollectionsRequest) Reset() {
	*x = ListCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectionsRequest) ProtoMessage() {}

func (x *ListCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectionsRequest.ProtoReflect.Descriptor instead.
func (*ListCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{1}
}

func (x *ListCollectionsRequest) GetPresentation() *Presentation {
	if x != nil {
		return x.Presentation
	}
	return nil
}

// ListCollectionsResponse -
type ListCollectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collections []*Collection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
}

func (x *ListCollectionsResponse) Reset() {
	*x = ListCollectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectionsResponse) ProtoMessage() {}

func (x *ListCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectionsResponse.ProtoReflect.Descriptor instead.
func (*ListCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{2}
}

func (x *ListCollectionsResponse) GetCollections() []*Collection {
	if x != nil {
		return x.Collections
	}
	return nil
}

type PingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Greeting string `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
}

func (x *PingMessage) Reset() {
	*x = PingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMessage) ProtoMessage() {}

func (x *PingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMessage.ProtoReflect.Descriptor instead.
func (*PingMessage) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{3}
}

func (x *PingMessage) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

// ListDevicesRequest defines the data required to get a list of devices
type ListDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent sector, eg: "home-iot".
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// reduction full, brief, summary
	Presentation []*Presentation `protobuf:"bytes,4,rep,name=presentation,proto3" json:"presentation,omitempty"`
	// The maximum number of devices to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListDevicesRequest) Reset() {
	*x = ListDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesRequest) ProtoMessage() {}

func (x *ListDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{4}
}

func (x *ListDevicesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDevicesRequest) GetPresentation() []*Presentation {
	if x != nil {
		return x.Presentation
	}
	return nil
}

func (x *ListDevicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDevicesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListDevicesResponse defines the return value to a ListDevicesRequest
type ListDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices listed
	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	// next page
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDevicesResponse) Reset() {
	*x = ListDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesResponse) ProtoMessage() {}

func (x *ListDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{5}
}

func (x *ListDevicesResponse) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ListDevicesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetDeviceRequest defines the data required to get a device
type GetDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device path name,
	// eg: "/sectors/home-iot/devices/esp32-01"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CreateDeviceRequest defines the data required to create a new device
type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent sector name
	// eg: /sectors/home-iot
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The device resource to create.
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDeviceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// UpdateDeviceRequest defines the data required to update an existing device
type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device path name,
	// eg: "/sectors/home-iot/devices/esp32-01"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The replacement device
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// DeleteDeviceRequest defines the data required to delete an existing device
type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device path name,
	// eg: "/sectors/home-iot/devices/esp32-01"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ListSketchesRequest defines the data required to get a list of sketches
type ListSketchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent model, eg: "ESP32".
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// format and projections...
	Presentation []*Presentation `protobuf:"bytes,4,rep,name=presentation,proto3" json:"presentation,omitempty"`
	// The maximum number of sketches to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSketchesRequest) Reset() {
	*x = ListSketchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSketchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSketchesRequest) ProtoMessage() {}

func (x *ListSketchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSketchesRequest.ProtoReflect.Descriptor instead.
func (*ListSketchesRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{10}
}

func (x *ListSketchesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSketchesRequest) GetPresentation() []*Presentation {
	if x != nil {
		return x.Presentation
	}
	return nil
}

func (x *ListSketchesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSketchesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// GetSketchRequest defines the data required to get a Sketch
type GetSketchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Sketch path name,
	// eg: "/models/ESP32/sketches/esp32-01"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSketchRequest) Reset() {
	*x = GetSketchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSketchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSketchRequest) ProtoMessage() {}

func (x *GetSketchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSketchRequest.ProtoReflect.Descriptor instead.
func (*GetSketchRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{11}
}

func (x *GetSketchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ListSketchesResponse defines the return value to a ListsketchesRequest
type ListSketchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sketches listed
	Sketches []*Sketch `protobuf:"bytes,1,rep,name=sketches,proto3" json:"sketches,omitempty"`
	// next page
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSketchesResponse) Reset() {
	*x = ListSketchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSketchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSketchesResponse) ProtoMessage() {}

func (x *ListSketchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSketchesResponse.ProtoReflect.Descriptor instead.
func (*ListSketchesResponse) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{12}
}

func (x *ListSketchesResponse) GetSketches() []*Sketch {
	if x != nil {
		return x.Sketches
	}
	return nil
}

func (x *ListSketchesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// CreateSketchRequest defines the data required to create a new Sketch
type CreateSketchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent model name
	// eg: /models/ESP32
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The Sketch resource to create.
	Sketch *Sketch `protobuf:"bytes,2,opt,name=Sketch,proto3" json:"Sketch,omitempty"`
}

func (x *CreateSketchRequest) Reset() {
	*x = CreateSketchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSketchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSketchRequest) ProtoMessage() {}

func (x *CreateSketchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSketchRequest.ProtoReflect.Descriptor instead.
func (*CreateSketchRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{13}
}

func (x *CreateSketchRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateSketchRequest) GetSketch() *Sketch {
	if x != nil {
		return x.Sketch
	}
	return nil
}

// UpdateSketchRequest defines the data required to update an existing Sketch
type UpdateSketchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Sketch path name,
	// eg: "/models/ESP32/sketches/esp32-01"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The replacement Sketch
	Sketch *Sketch `protobuf:"bytes,2,opt,name=Sketch,proto3" json:"Sketch,omitempty"`
}

func (x *UpdateSketchRequest) Reset() {
	*x = UpdateSketchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSketchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSketchRequest) ProtoMessage() {}

func (x *UpdateSketchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSketchRequest.ProtoReflect.Descriptor instead.
func (*UpdateSketchRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateSketchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSketchRequest) GetSketch() *Sketch {
	if x != nil {
		return x.Sketch
	}
	return nil
}

// DeleteSketchRequest defines the data required to delete an existing Sketch
type DeleteSketchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Sketch path name,
	// eg: "/models/ESP32/sketches/esp32-01"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSketchRequest) Reset() {
	*x = DeleteSketchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketchit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSketchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSketchRequest) ProtoMessage() {}

func (x *DeleteSketchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sketchit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSketchRequest.ProtoReflect.Descriptor instead.
func (*DeleteSketchRequest) Descriptor() ([]byte, []int) {
	return file_sketchit_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteSketchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_sketchit_proto protoreflect.FileDescriptor

var file_sketchit_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x75, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x29,
	0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74,
	0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x77,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x65, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74,
	0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x52, 0x08, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x65,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x06, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x52, 0x06, 0x53,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0x61, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x06, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0x29, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0xd7, 0x0d, 0x0a, 0x08, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74,
	0x12, 0x68, 0x0a, 0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x23, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x23, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22, 0x07,
	0x2f, 0x31, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x3a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x32, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x28, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x74, 0x6f,
	0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x3a, 0x06, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x32, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x74, 0x6f, 0x6f, 0x6c,
	0x6b, 0x69, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x06, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x7d, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x74, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x75, 0x74, 0x79, 0x12, 0x28, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x75, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74,
	0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x75, 0x74, 0x79, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x64, 0x65, 0x70, 0x75, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x42, 0x24, 0x5a,
	0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2f,
	0x61, 0x70, 0x69, 0x50, 0x00, 0x50, 0x01, 0x50, 0x02, 0x50, 0x03, 0x50, 0x04, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sketchit_proto_rawDescOnce sync.Once
	file_sketchit_proto_rawDescData = file_sketchit_proto_rawDesc
)

func file_sketchit_proto_rawDescGZIP() []byte {
	file_sketchit_proto_rawDescOnce.Do(func() {
		file_sketchit_proto_rawDescData = protoimpl.X.CompressGZIP(file_sketchit_proto_rawDescData)
	})
	return file_sketchit_proto_rawDescData
}

var file_sketchit_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_sketchit_proto_goTypes = []interface{}{
	(*GetDeputyRequest)(nil),        // 0: centretown.sketchit.v1.GetDeputyRequest
	(*ListCollectionsRequest)(nil),  // 1: centretown.sketchit.v1.ListCollectionsRequest
	(*ListCollectionsResponse)(nil), // 2: centretown.sketchit.v1.ListCollectionsResponse
	(*PingMessage)(nil),             // 3: centretown.sketchit.v1.PingMessage
	(*ListDevicesRequest)(nil),      // 4: centretown.sketchit.v1.ListDevicesRequest
	(*ListDevicesResponse)(nil),     // 5: centretown.sketchit.v1.ListDevicesResponse
	(*GetDeviceRequest)(nil),        // 6: centretown.sketchit.v1.GetDeviceRequest
	(*CreateDeviceRequest)(nil),     // 7: centretown.sketchit.v1.CreateDeviceRequest
	(*UpdateDeviceRequest)(nil),     // 8: centretown.sketchit.v1.UpdateDeviceRequest
	(*DeleteDeviceRequest)(nil),     // 9: centretown.sketchit.v1.DeleteDeviceRequest
	(*ListSketchesRequest)(nil),     // 10: centretown.sketchit.v1.ListSketchesRequest
	(*GetSketchRequest)(nil),        // 11: centretown.sketchit.v1.GetSketchRequest
	(*ListSketchesResponse)(nil),    // 12: centretown.sketchit.v1.ListSketchesResponse
	(*CreateSketchRequest)(nil),     // 13: centretown.sketchit.v1.CreateSketchRequest
	(*UpdateSketchRequest)(nil),     // 14: centretown.sketchit.v1.UpdateSketchRequest
	(*DeleteSketchRequest)(nil),     // 15: centretown.sketchit.v1.DeleteSketchRequest
	(*Presentation)(nil),            // 16: centretown.sketchit.v1.Presentation
	(*Collection)(nil),              // 17: centretown.sketchit.v1.Collection
	(*Device)(nil),                  // 18: centretown.sketchit.v1.Device
	(*Sketch)(nil),                  // 19: centretown.sketchit.v1.Sketch
	(*empty.Empty)(nil),             // 20: google.protobuf.Empty
	(*Deputy)(nil),                  // 21: centretown.sketchit.v1.Deputy
}
var file_sketchit_proto_depIdxs = []int32{
	16, // 0: centretown.sketchit.v1.ListCollectionsRequest.presentation:type_name -> centretown.sketchit.v1.Presentation
	17, // 1: centretown.sketchit.v1.ListCollectionsResponse.collections:type_name -> centretown.sketchit.v1.Collection
	16, // 2: centretown.sketchit.v1.ListDevicesRequest.presentation:type_name -> centretown.sketchit.v1.Presentation
	18, // 3: centretown.sketchit.v1.ListDevicesResponse.devices:type_name -> centretown.sketchit.v1.Device
	18, // 4: centretown.sketchit.v1.CreateDeviceRequest.device:type_name -> centretown.sketchit.v1.Device
	18, // 5: centretown.sketchit.v1.UpdateDeviceRequest.device:type_name -> centretown.sketchit.v1.Device
	16, // 6: centretown.sketchit.v1.ListSketchesRequest.presentation:type_name -> centretown.sketchit.v1.Presentation
	19, // 7: centretown.sketchit.v1.ListSketchesResponse.sketches:type_name -> centretown.sketchit.v1.Sketch
	19, // 8: centretown.sketchit.v1.CreateSketchRequest.Sketch:type_name -> centretown.sketchit.v1.Sketch
	19, // 9: centretown.sketchit.v1.UpdateSketchRequest.Sketch:type_name -> centretown.sketchit.v1.Sketch
	3,  // 10: centretown.sketchit.v1.Sketchit.SayHello:input_type -> centretown.sketchit.v1.PingMessage
	4,  // 11: centretown.sketchit.v1.Sketchit.ListDevices:input_type -> centretown.sketchit.v1.ListDevicesRequest
	6,  // 12: centretown.sketchit.v1.Sketchit.GetDevice:input_type -> centretown.sketchit.v1.GetDeviceRequest
	7,  // 13: centretown.sketchit.v1.Sketchit.CreateDevice:input_type -> centretown.sketchit.v1.CreateDeviceRequest
	8,  // 14: centretown.sketchit.v1.Sketchit.UpdateDevice:input_type -> centretown.sketchit.v1.UpdateDeviceRequest
	9,  // 15: centretown.sketchit.v1.Sketchit.DeleteDevice:input_type -> centretown.sketchit.v1.DeleteDeviceRequest
	10, // 16: centretown.sketchit.v1.Sketchit.ListSketches:input_type -> centretown.sketchit.v1.ListSketchesRequest
	11, // 17: centretown.sketchit.v1.Sketchit.GetSketch:input_type -> centretown.sketchit.v1.GetSketchRequest
	13, // 18: centretown.sketchit.v1.Sketchit.CreateSketch:input_type -> centretown.sketchit.v1.CreateSketchRequest
	14, // 19: centretown.sketchit.v1.Sketchit.UpdateSketch:input_type -> centretown.sketchit.v1.UpdateSketchRequest
	15, // 20: centretown.sketchit.v1.Sketchit.DeleteSketch:input_type -> centretown.sketchit.v1.DeleteSketchRequest
	1,  // 21: centretown.sketchit.v1.Sketchit.ListCollections:input_type -> centretown.sketchit.v1.ListCollectionsRequest
	0,  // 22: centretown.sketchit.v1.Sketchit.GetDeputy:input_type -> centretown.sketchit.v1.GetDeputyRequest
	3,  // 23: centretown.sketchit.v1.Sketchit.SayHello:output_type -> centretown.sketchit.v1.PingMessage
	5,  // 24: centretown.sketchit.v1.Sketchit.ListDevices:output_type -> centretown.sketchit.v1.ListDevicesResponse
	18, // 25: centretown.sketchit.v1.Sketchit.GetDevice:output_type -> centretown.sketchit.v1.Device
	18, // 26: centretown.sketchit.v1.Sketchit.CreateDevice:output_type -> centretown.sketchit.v1.Device
	18, // 27: centretown.sketchit.v1.Sketchit.UpdateDevice:output_type -> centretown.sketchit.v1.Device
	20, // 28: centretown.sketchit.v1.Sketchit.DeleteDevice:output_type -> google.protobuf.Empty
	12, // 29: centretown.sketchit.v1.Sketchit.ListSketches:output_type -> centretown.sketchit.v1.ListSketchesResponse
	19, // 30: centretown.sketchit.v1.Sketchit.GetSketch:output_type -> centretown.sketchit.v1.Sketch
	19, // 31: centretown.sketchit.v1.Sketchit.CreateSketch:output_type -> centretown.sketchit.v1.Sketch
	19, // 32: centretown.sketchit.v1.Sketchit.UpdateSketch:output_type -> centretown.sketchit.v1.Sketch
	20, // 33: centretown.sketchit.v1.Sketchit.DeleteSketch:output_type -> google.protobuf.Empty
	2,  // 34: centretown.sketchit.v1.Sketchit.ListCollections:output_type -> centretown.sketchit.v1.ListCollectionsResponse
	21, // 35: centretown.sketchit.v1.Sketchit.GetDeputy:output_type -> centretown.sketchit.v1.Deputy
	23, // [23:36] is the sub-list for method output_type
	10, // [10:23] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_sketchit_proto_init() }
func file_sketchit_proto_init() {
	if File_sketchit_proto != nil {
		return
	}
	file_device_proto_init()
	file_sketch_proto_init()
	file_collection_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sketchit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeputyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSketchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSketchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSketchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSketchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSketchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketchit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSketchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sketchit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sketchit_proto_goTypes,
		DependencyIndexes: file_sketchit_proto_depIdxs,
		MessageInfos:      file_sketchit_proto_msgTypes,
	}.Build()
	File_sketchit_proto = out.File
	file_sketchit_proto_rawDesc = nil
	file_sketchit_proto_goTypes = nil
	file_sketchit_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SketchitClient is the client API for Sketchit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SketchitClient interface {
	SayHello(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListSketches(ctx context.Context, in *ListSketchesRequest, opts ...grpc.CallOption) (*ListSketchesResponse, error)
	GetSketch(ctx context.Context, in *GetSketchRequest, opts ...grpc.CallOption) (*Sketch, error)
	CreateSketch(ctx context.Context, in *CreateSketchRequest, opts ...grpc.CallOption) (*Sketch, error)
	UpdateSketch(ctx context.Context, in *UpdateSketchRequest, opts ...grpc.CallOption) (*Sketch, error)
	DeleteSketch(ctx context.Context, in *DeleteSketchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	GetDeputy(ctx context.Context, in *GetDeputyRequest, opts ...grpc.CallOption) (*Deputy, error)
}

type sketchitClient struct {
	cc grpc.ClientConnInterface
}

func NewSketchitClient(cc grpc.ClientConnInterface) SketchitClient {
	return &sketchitClient{cc}
}

func (c *sketchitClient) SayHello(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) ListSketches(ctx context.Context, in *ListSketchesRequest, opts ...grpc.CallOption) (*ListSketchesResponse, error) {
	out := new(ListSketchesResponse)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/ListSketches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) GetSketch(ctx context.Context, in *GetSketchRequest, opts ...grpc.CallOption) (*Sketch, error) {
	out := new(Sketch)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/GetSketch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) CreateSketch(ctx context.Context, in *CreateSketchRequest, opts ...grpc.CallOption) (*Sketch, error) {
	out := new(Sketch)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/CreateSketch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) UpdateSketch(ctx context.Context, in *UpdateSketchRequest, opts ...grpc.CallOption) (*Sketch, error) {
	out := new(Sketch)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/UpdateSketch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) DeleteSketch(ctx context.Context, in *DeleteSketchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/DeleteSketch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/ListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sketchitClient) GetDeputy(ctx context.Context, in *GetDeputyRequest, opts ...grpc.CallOption) (*Deputy, error) {
	out := new(Deputy)
	err := c.cc.Invoke(ctx, "/centretown.sketchit.v1.Sketchit/GetDeputy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SketchitServer is the server API for Sketchit service.
type SketchitServer interface {
	SayHello(context.Context, *PingMessage) (*PingMessage, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*empty.Empty, error)
	ListSketches(context.Context, *ListSketchesRequest) (*ListSketchesResponse, error)
	GetSketch(context.Context, *GetSketchRequest) (*Sketch, error)
	CreateSketch(context.Context, *CreateSketchRequest) (*Sketch, error)
	UpdateSketch(context.Context, *UpdateSketchRequest) (*Sketch, error)
	DeleteSketch(context.Context, *DeleteSketchRequest) (*empty.Empty, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	GetDeputy(context.Context, *GetDeputyRequest) (*Deputy, error)
}

// UnimplementedSketchitServer can be embedded to have forward compatible implementations.
type UnimplementedSketchitServer struct {
}

func (*UnimplementedSketchitServer) SayHello(context.Context, *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedSketchitServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedSketchitServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (*UnimplementedSketchitServer) CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedSketchitServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (*UnimplementedSketchitServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (*UnimplementedSketchitServer) ListSketches(context.Context, *ListSketchesRequest) (*ListSketchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSketches not implemented")
}
func (*UnimplementedSketchitServer) GetSketch(context.Context, *GetSketchRequest) (*Sketch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSketch not implemented")
}
func (*UnimplementedSketchitServer) CreateSketch(context.Context, *CreateSketchRequest) (*Sketch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSketch not implemented")
}
func (*UnimplementedSketchitServer) UpdateSketch(context.Context, *UpdateSketchRequest) (*Sketch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSketch not implemented")
}
func (*UnimplementedSketchitServer) DeleteSketch(context.Context, *DeleteSketchRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSketch not implemented")
}
func (*UnimplementedSketchitServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (*UnimplementedSketchitServer) GetDeputy(context.Context, *GetDeputyRequest) (*Deputy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeputy not implemented")
}

func RegisterSketchitServer(s *grpc.Server, srv SketchitServer) {
	s.RegisterService(&_Sketchit_serviceDesc, srv)
}

func _Sketchit_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).SayHello(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_ListSketches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSketchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).ListSketches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/ListSketches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).ListSketches(ctx, req.(*ListSketchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_GetSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSketchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).GetSketch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/GetSketch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).GetSketch(ctx, req.(*GetSketchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_CreateSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSketchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).CreateSketch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/CreateSketch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).CreateSketch(ctx, req.(*CreateSketchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_UpdateSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSketchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).UpdateSketch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/UpdateSketch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).UpdateSketch(ctx, req.(*UpdateSketchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_DeleteSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSketchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).DeleteSketch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/DeleteSketch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).DeleteSketch(ctx, req.(*DeleteSketchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sketchit_GetDeputy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeputyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SketchitServer).GetDeputy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centretown.sketchit.v1.Sketchit/GetDeputy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SketchitServer).GetDeputy(ctx, req.(*GetDeputyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sketchit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "centretown.sketchit.v1.Sketchit",
	HandlerType: (*SketchitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Sketchit_SayHello_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _Sketchit_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _Sketchit_GetDevice_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Sketchit_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _Sketchit_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Sketchit_DeleteDevice_Handler,
		},
		{
			MethodName: "ListSketches",
			Handler:    _Sketchit_ListSketches_Handler,
		},
		{
			MethodName: "GetSketch",
			Handler:    _Sketchit_GetSketch_Handler,
		},
		{
			MethodName: "CreateSketch",
			Handler:    _Sketchit_CreateSketch_Handler,
		},
		{
			MethodName: "UpdateSketch",
			Handler:    _Sketchit_UpdateSketch_Handler,
		},
		{
			MethodName: "DeleteSketch",
			Handler:    _Sketchit_DeleteSketch_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _Sketchit_ListCollections_Handler,
		},
		{
			MethodName: "GetDeputy",
			Handler:    _Sketchit_GetDeputy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sketchit.proto",
}
