// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: sketch.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Operation int32

const (
	Operation_nop   Operation = 0
	Operation_delay Operation = 1
	Operation_mode  Operation = 2
	Operation_pin   Operation = 3
	Operation_hall  Operation = 4
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "nop",
		1: "delay",
		2: "mode",
		3: "pin",
		4: "hall",
	}
	Operation_value = map[string]int32{
		"nop":   0,
		"delay": 1,
		"mode":  2,
		"pin":   3,
		"hall":  4,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sketch_proto_enumTypes[0].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_sketch_proto_enumTypes[0]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{0}
}

type Signal int32

const (
	Signal_nosignal Signal = 0
	Signal_analog   Signal = 1
	Signal_digital  Signal = 2
)

// Enum value maps for Signal.
var (
	Signal_name = map[int32]string{
		0: "nosignal",
		1: "analog",
		2: "digital",
	}
	Signal_value = map[string]int32{
		"nosignal": 0,
		"analog":   1,
		"digital":  2,
	}
)

func (x Signal) Enum() *Signal {
	p := new(Signal)
	*p = x
	return p
}

func (x Signal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Signal) Descriptor() protoreflect.EnumDescriptor {
	return file_sketch_proto_enumTypes[1].Descriptor()
}

func (Signal) Type() protoreflect.EnumType {
	return &file_sketch_proto_enumTypes[1]
}

func (x Signal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Signal.Descriptor instead.
func (Signal) EnumDescriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{1}
}

type Mode int32

const (
	Mode_nomode Mode = 0
	Mode_input  Mode = 1
	Mode_output Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "nomode",
		1: "input",
		2: "output",
	}
	Mode_value = map[string]int32{
		"nomode": 0,
		"input":  1,
		"output": 2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_sketch_proto_enumTypes[2].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_sketch_proto_enumTypes[2]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{2}
}

type Digital int32

const (
	Digital_low  Digital = 0
	Digital_high Digital = 1
)

// Enum value maps for Digital.
var (
	Digital_name = map[int32]string{
		0: "low",
		1: "high",
	}
	Digital_value = map[string]int32{
		"low":  0,
		"high": 1,
	}
)

func (x Digital) Enum() *Digital {
	p := new(Digital)
	*p = x
	return p
}

func (x Digital) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Digital) Descriptor() protoreflect.EnumDescriptor {
	return file_sketch_proto_enumTypes[3].Descriptor()
}

func (Digital) Type() protoreflect.EnumType {
	return &file_sketch_proto_enumTypes[3]
}

func (x Digital) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Digital.Descriptor instead.
func (Digital) EnumDescriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{3}
}

// Sketch defines how a device is programmed
type Sketch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The toolkit or skillset required to run
	// this sketch core (Nano,Uno), esp32 ()
	Toolkit string `protobuf:"bytes,1,opt,name=toolkit,proto3" json:"toolkit,omitempty"`
	// The label unique to this toolkit
	// eg: "blink"
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// The device activated by this sketch
	// eg: "/home-iot/devices/esp32-01"
	Device string `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	// The purpose or description of the actions take by this sketch
	// eg: "Blink at prescribed intervals"
	Purpose string `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// The setup stage defines the actions to take once
	// before entering the sketch loop
	Setup []*Action `protobuf:"bytes,5,rep,name=setup,proto3" json:"setup,omitempty"`
	// The loop defines the actions that repeats forever
	Loop []*Action `protobuf:"bytes,6,rep,name=loop,proto3" json:"loop,omitempty"`
}

func (x *Sketch) Reset() {
	*x = Sketch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sketch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sketch) ProtoMessage() {}

func (x *Sketch) ProtoReflect() protoreflect.Message {
	mi := &file_sketch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sketch.ProtoReflect.Descriptor instead.
func (*Sketch) Descriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{0}
}

func (x *Sketch) GetToolkit() string {
	if x != nil {
		return x.Toolkit
	}
	return ""
}

func (x *Sketch) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Sketch) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Sketch) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *Sketch) GetSetup() []*Action {
	if x != nil {
		return x.Setup
	}
	return nil
}

func (x *Sketch) GetLoop() []*Action {
	if x != nil {
		return x.Loop
	}
	return nil
}

// Action defines a processing step or instruction
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type identifies the type of command to run
	Operation Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=centretown.sketchit.v1.Operation" json:"operation,omitempty"`
	// arguments
	Arguments []int32 `protobuf:"varint,2,rep,packed,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_sketch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{1}
}

func (x *Action) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_nop
}

func (x *Action) GetArguments() []int32 {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// DelayOperation defines the data to carry out this action
type DelayOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration of the delay in milliseconds
	Duration int32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *DelayOperation) Reset() {
	*x = DelayOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayOperation) ProtoMessage() {}

func (x *DelayOperation) ProtoReflect() protoreflect.Message {
	mi := &file_sketch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayOperation.ProtoReflect.Descriptor instead.
func (*DelayOperation) Descriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{2}
}

func (x *DelayOperation) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// HallOperation defines the data to carry out this action
type HallOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration of the delay in milliseconds
	Measurement int32 `protobuf:"varint,1,opt,name=measurement,proto3" json:"measurement,omitempty"`
}

func (x *HallOperation) Reset() {
	*x = HallOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallOperation) ProtoMessage() {}

func (x *HallOperation) ProtoReflect() protoreflect.Message {
	mi := &file_sketch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallOperation.ProtoReflect.Descriptor instead.
func (*HallOperation) Descriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{3}
}

func (x *HallOperation) GetMeasurement() int32 {
	if x != nil {
		return x.Measurement
	}
	return 0
}

// ModeOperation defines how a pin is acted on.
type ModeOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pin id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The signal type analog/digital
	Signal Signal `protobuf:"varint,2,opt,name=signal,proto3,enum=centretown.sketchit.v1.Signal" json:"signal,omitempty"`
	// The mode type output/input
	Mode Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=centretown.sketchit.v1.Mode" json:"mode,omitempty"`
}

func (x *ModeOperation) Reset() {
	*x = ModeOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeOperation) ProtoMessage() {}

func (x *ModeOperation) ProtoReflect() protoreflect.Message {
	mi := &file_sketch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeOperation.ProtoReflect.Descriptor instead.
func (*ModeOperation) Descriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{4}
}

func (x *ModeOperation) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModeOperation) GetSignal() Signal {
	if x != nil {
		return x.Signal
	}
	return Signal_nosignal
}

func (x *ModeOperation) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_nomode
}

// PinOperation reads/writes analog/digital values
type PinOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pin id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The signal type analog/digita
	Signal Signal `protobuf:"varint,2,opt,name=signal,proto3,enum=centretown.sketchit.v1.Signal" json:"signal,omitempty"`
	// The mode type output/input
	Mode Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=centretown.sketchit.v1.Mode" json:"mode,omitempty"`
	// The value to read from or write to
	Value int32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PinOperation) Reset() {
	*x = PinOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sketch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinOperation) ProtoMessage() {}

func (x *PinOperation) ProtoReflect() protoreflect.Message {
	mi := &file_sketch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinOperation.ProtoReflect.Descriptor instead.
func (*PinOperation) Descriptor() ([]byte, []int) {
	return file_sketch_proto_rawDescGZIP(), []int{5}
}

func (x *PinOperation) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PinOperation) GetSignal() Signal {
	if x != nil {
		return x.Signal
	}
	return Signal_nosignal
}

func (x *PinOperation) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_nomode
}

func (x *PinOperation) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_sketch_proto protoreflect.FileDescriptor

var file_sketch_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x0c, 0x64, 0x65, 0x70, 0x75, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x06, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x22, 0x67, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0d, 0x48, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2a, 0x3c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x07, 0x0a, 0x03, 0x6e, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x70, 0x69, 0x6e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x61, 0x6c, 0x6c, 0x10, 0x04,
	0x2a, 0x2f, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x6e, 0x61, 0x6c,
	0x6f, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x10,
	0x02, 0x2a, 0x29, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x6f, 0x6d,
	0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x10, 0x02, 0x2a, 0x1c, 0x0a, 0x07,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x10, 0x01, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x74,
	0x6f, 0x77, 0x6e, 0x2f, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sketch_proto_rawDescOnce sync.Once
	file_sketch_proto_rawDescData = file_sketch_proto_rawDesc
)

func file_sketch_proto_rawDescGZIP() []byte {
	file_sketch_proto_rawDescOnce.Do(func() {
		file_sketch_proto_rawDescData = protoimpl.X.CompressGZIP(file_sketch_proto_rawDescData)
	})
	return file_sketch_proto_rawDescData
}

var file_sketch_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sketch_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sketch_proto_goTypes = []interface{}{
	(Operation)(0),         // 0: centretown.sketchit.v1.Operation
	(Signal)(0),            // 1: centretown.sketchit.v1.Signal
	(Mode)(0),              // 2: centretown.sketchit.v1.Mode
	(Digital)(0),           // 3: centretown.sketchit.v1.Digital
	(*Sketch)(nil),         // 4: centretown.sketchit.v1.Sketch
	(*Action)(nil),         // 5: centretown.sketchit.v1.Action
	(*DelayOperation)(nil), // 6: centretown.sketchit.v1.DelayOperation
	(*HallOperation)(nil),  // 7: centretown.sketchit.v1.HallOperation
	(*ModeOperation)(nil),  // 8: centretown.sketchit.v1.ModeOperation
	(*PinOperation)(nil),   // 9: centretown.sketchit.v1.PinOperation
}
var file_sketch_proto_depIdxs = []int32{
	5, // 0: centretown.sketchit.v1.Sketch.setup:type_name -> centretown.sketchit.v1.Action
	5, // 1: centretown.sketchit.v1.Sketch.loop:type_name -> centretown.sketchit.v1.Action
	0, // 2: centretown.sketchit.v1.Action.operation:type_name -> centretown.sketchit.v1.Operation
	1, // 3: centretown.sketchit.v1.ModeOperation.signal:type_name -> centretown.sketchit.v1.Signal
	2, // 4: centretown.sketchit.v1.ModeOperation.mode:type_name -> centretown.sketchit.v1.Mode
	1, // 5: centretown.sketchit.v1.PinOperation.signal:type_name -> centretown.sketchit.v1.Signal
	2, // 6: centretown.sketchit.v1.PinOperation.mode:type_name -> centretown.sketchit.v1.Mode
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_sketch_proto_init() }
func file_sketch_proto_init() {
	if File_sketch_proto != nil {
		return
	}
	file_deputy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sketch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sketch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModeOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sketch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sketch_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sketch_proto_goTypes,
		DependencyIndexes: file_sketch_proto_depIdxs,
		EnumInfos:         file_sketch_proto_enumTypes,
		MessageInfos:      file_sketch_proto_msgTypes,
	}.Build()
	File_sketch_proto = out.File
	file_sketch_proto_rawDesc = nil
	file_sketch_proto_goTypes = nil
	file_sketch_proto_depIdxs = nil
}
